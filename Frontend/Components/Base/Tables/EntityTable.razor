@typeparam T where T : class
@using Radzen
@using Radzen.Blazor
@using Shared.Models.Export
@using Frontend.Services
@using Shared.Models.QueryModels

<div class="entity-table-container">
    @if (HasViewSelector() || ShowSearchBar || ShowExcelExport || ShowRefreshButton || ShowAutoRefresh)
    {
        <RadzenRow class="mb-3" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            @* BLOQUE 1: Selector de Vista (4 columnas, pegado a la izquierda) *@
            @if (HasViewSelector())
            {
                <RadzenColumn SizeLG="4" SizeMD="5" SizeSM="12" Class="d-flex pe-2">
                    <RadzenFormField Text="Vista" Variant="Variant.Outlined" Style="width: 100%;">
                        <RadzenDropDown Value="@GetCurrentViewDisplayName()"
                                        Data="@ViewConfigurations"
                                        TextProperty="@ViewDisplayNameProperty"
                                        ValueProperty="@ViewDisplayNameProperty"
                                        Change="@OnViewChangedInternal"
                                        />
                    </RadzenFormField>
                </RadzenColumn>
            }
            
            @* BLOQUE 2: Buscador + Botones (8 columnas, pegado a la derecha) *@
            <RadzenColumn SizeLG="@GetMainContentColumnSize()" SizeMD="@GetMainContentColumnSizeMD()" SizeSM="12" Class="ps-2">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" 
                             JustifyContent="JustifyContent.End" Style="width: 100%;">
                    
                    @* Buscador pegado a los botones *@
                    @if (ShowSearchBar)
                    {
                        <div style="flex-shrink: 0;">
                            <RadzenFormField Style="margin-bottom: 10px">
                                <ChildContent>
                                    <RadzenTextBox @oninput=@(async arg => { searchTerm = arg.Value is null ? "" : arg.Value.ToString(); })
                                                   Placeholder="@SearchPlaceholder"
                                                   @onkeypress="@OnSearchKeyPress" 
                                                   Style="width: 100%;" />
                                </ChildContent>
                                <End>
                                    <RadzenButton Icon="search"
                                                  Click="@OnSearchSubmit"
                                                  Variant="Variant.Text"
                                                  Size="ButtonSize.Small" />
                                </End>
                            </RadzenFormField>
                            
                            @if (ShowSearchFieldsInput)
                            {
                                <RadzenFormField class="mt-2">
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="currentSearchFieldsInput"
                                                       Placeholder="Campos de búsqueda (ej: Nombre,Descripcion)"
                                                       Style="font-size: 12px; width: 100%;" />
                                    </ChildContent>
                                    <End>
                                        <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                            Campos
                                        </RadzenText>
                                    </End>
                                </RadzenFormField>
                            }
                        </div>
                    }
                    
                    @* Botones (lado derecho del bloque) *@
                    <div class="d-flex gap-2 justify-content-end" style="flex-shrink: 0;">
                    @if (ShowAutoRefresh)
                    {
                        <RadzenSplitButton Click="@(async (item) => await OnSplitButtonClick(item, "AutoRefresh"))"
                                           ButtonStyle="ButtonStyle.Base"
                                           Size="ButtonSize.Small"
                                           Icon="refresh"
                                           Text="@GetRefreshText()">
                            <ChildContent>
                                <RadzenSplitButtonItem Text="Detener auto-actualización" 
                                                       Value="0" />
                                @foreach (var interval in AutoRefreshIntervals)
                                {
                                    <RadzenSplitButtonItem Text="@GetAutoRefreshLabel(interval)" 
                                                           Value="@interval.ToString()" />
                                }
                            </ChildContent>
                        </RadzenSplitButton>
                    }
                    else if (ShowRefreshButton)
                    {
                        <RadzenButton Click="@ManualRefresh"
                                      ButtonStyle="ButtonStyle.Base"
                                      Size="ButtonSize.Small"
                                      Icon="refresh"
                                      title="@RefreshButtonText" />
                    }
                    
                    @if (ShowColumnConfig)
                    {
                        <RadzenButton Click="@OpenColumnConfigModal"
                                      ButtonStyle="ButtonStyle.Base"
                                      Size="ButtonSize.ExtraSmall"
                                      Style="padding: 6px; border-radius: 4px;"
                                      Icon="view_column"
                                      title="@ColumnConfigButtonText" />
                    }
                    
                    @if (ShowExcelExport)
                    {
                        <RadzenButton Click="@ExportToExcel"
                                      ButtonStyle="ButtonStyle.Base"
                                      Size="ButtonSize.ExtraSmall"
                                      Style="padding: 6px; border-radius: 4px; margin-left: 10px"
                                      Icon="download"
                                      IconColor="green"
                                      title="@ExcelButtonText" />
                    }
                    </div>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    }

    <RadzenDataGrid @ref="grid"
                    TItem="T"
                    Data="@entities"
                    Count="@totalCount"
                    LoadData="@LoadData"
                    AllowPaging="@AllowPaging"
                    AllowSorting="@AllowSorting"
                    AllowFiltering="@AllowFiltering"
                    AllowColumnResize="@AllowColumnResize"
                    PageSize="@PageSize"
                    PageSizeOptions="@PageSizeOptions"
                    ShowPagingSummary="@ShowPagingSummary"
                    PagerHorizontalAlign="@PagerHorizontalAlign"
                    EmptyText="@EmptyText"
                    Style="@Style"
                    IsLoading="@isLoading"
                    IsBusy="@isLoading"
                    ColumnWidth="@ColumnWidth">

        <Columns>
            @if (ShowActions)
            {
                <RadzenDataGridColumn TItem="T"
                                      Sortable="false"
                                      Filterable="false"
                                      Width="@ActionsColumnWidth"
                                      TextAlign="TextAlign.Center"
                                      Frozen="@FreezeActionsColumn">
                    <HeaderTemplate>
                        <span>@ActionsColumnTitle</span>
                    </HeaderTemplate>
                    <Template Context="item">
                        @if (CustomActions != null)
                        {
                            @CustomActions(item)
                        }
                        else
                        {
                            @if (ShowEditButton)
                            {
                                <RadzenButton Icon="@EditIcon"
                                              ButtonStyle="@EditButtonStyle"
                                              Size="ButtonSize.Small"
                                              Click="@(() => HandleEdit(item))"
                                              class="me-1" Style="margin-right: 10px" />
                            }
                            @if (ShowDeleteButton)
                            {
                                <RadzenButton Icon="@DeleteIcon"
                                              ButtonStyle="@DeleteButtonStyle"
                                              Size="ButtonSize.Small"
                                              Click="@(() => HandleDelete(item))" />
                            }
                        }
                    </Template>
                </RadzenDataGridColumn>
            }

            @if (ShouldCombineColumns())
            {
                @* Modo híbrido: Renderiza columnas en orden correcto *@
                @* Primero las columnas nativas hasta antes de Active *@
                @foreach (var col in ColumnConfigs.Where(c => c.Order < 3).OrderBy(c => c.Order ?? 999))
                {
                    @if (col.Template != null)
                    {
                        <RadzenDataGridColumn TItem="T"
                                              Property="@col.Property"
                                              Title="@col.Title"
                                              Width="@col.Width"
                                              Sortable="@col.Sortable"
                                              Filterable="@col.Filterable"
                                              TextAlign="@col.TextAlign"
                                              Frozen="@col.Frozen"
                                              Visible="@col.Visible">
                            <Template Context="item">
                                @col.Template(item)
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    else
                    {
                        <RadzenDataGridColumn TItem="T"
                                              Property="@col.Property"
                                              Title="@col.Title"
                                              Width="@col.Width"
                                              Sortable="@col.Sortable"
                                              Filterable="@col.Filterable"
                                              TextAlign="@col.TextAlign"
                                              Frozen="@col.Frozen"
                                              Visible="@col.Visible" />
                    }
                }
                
                @* Luego las columnas personalizadas (Active con orden 3) *@
                @if (Columns != null)
                {
                    @Columns
                }
                
                @* Finalmente las columnas nativas después de Active *@
                @foreach (var col in ColumnConfigs.Where(c => c.Order > 3).OrderBy(c => c.Order ?? 999))
                {
                    @if (col.Template != null)
                    {
                        <RadzenDataGridColumn TItem="T"
                                              Property="@col.Property"
                                              Title="@col.Title"
                                              Width="@col.Width"
                                              Sortable="@col.Sortable"
                                              Filterable="@col.Filterable"
                                              TextAlign="@col.TextAlign"
                                              Frozen="@col.Frozen"
                                              Visible="@col.Visible">
                            <Template Context="item">
                                @col.Template(item)
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    else
                    {
                        <RadzenDataGridColumn TItem="T"
                                              Property="@col.Property"
                                              Title="@col.Title"
                                              Width="@col.Width"
                                              Sortable="@col.Sortable"
                                              Filterable="@col.Filterable"
                                              TextAlign="@col.TextAlign"
                                              Frozen="@col.Frozen"
                                              Visible="@col.Visible" />
                    }
                }
            }
            else if (Columns != null)
            {
                @* Modo clásico: Solo RenderFragment Columns *@
                @Columns
            }
            else if (ColumnConfigs != null && ColumnConfigs.Any())
            {
                @* Modo clásico: Solo ColumnConfigs ordenadas por índice *@
                @foreach (var col in GetFinalOrderedConfigs())
                {
                    @if (col.Template != null)
                    {
                        <RadzenDataGridColumn TItem="T"
                                              Property="@col.Property"
                                              Title="@col.Title"
                                              Width="@col.Width"
                                              Sortable="@col.Sortable"
                                              Filterable="@col.Filterable"
                                              TextAlign="@col.TextAlign"
                                              Frozen="@col.Frozen"
                                              Visible="@col.Visible">
                            <Template Context="item">
                                @col.Template(item)
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    else
                    {
                        <RadzenDataGridColumn TItem="T"
                                              Property="@col.Property"
                                              Title="@col.Title"
                                              Width="@col.Width"
                                              Sortable="@col.Sortable"
                                              Filterable="@col.Filterable"
                                              TextAlign="@col.TextAlign"
                                              Frozen="@col.Frozen"
                                              Visible="@col.Visible" />
                    }
                }
            }
            else
            {
                @* Generar columnas automáticas usando reflexión *@
                @foreach (var prop in GetAutoColumns())
                {
                    <RadzenDataGridColumn TItem="T"
                                          Property="@prop.Name"
                                          Title="@GetDisplayName(prop.Name)" />
                }
            }
        </Columns>
    </RadzenDataGrid>
</div>

<style>
    .entity-table-container {
        width: 100%;
        position: relative;
    }
</style>