@typeparam T where T : class
@using Radzen
@using Radzen.Blazor
@using Shared.Models.Export
@using Frontend.Services
@using Shared.Models.QueryModels

<div class="entity-table-container">
    @if (HasViewSelector() || ShowSearchBar || ShowExcelExport || ShowRefreshButton || ShowAutoRefresh)
    {
        @* Responsive layout: en móvil cada sección ocupará toda la fila *@
        <RadzenRow class="mb-3" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            @* BLOQUE 1: Selector de Vista *@
            @if (HasViewSelector())
            {
                <RadzenColumn SizeLG="4" SizeMD="5" SizeSM="12" SizeXS="12" Class="@GetViewSelectorClass()">
                    <RadzenFormField Text="Vista" Variant="Variant.Outlined" Style="width: 100%;">
                        <RadzenDropDown Value="@CurrentView"
                                        Data="@ViewConfigurations"
                                        TextProperty="@ViewDisplayNameProperty"
                                        Change="@OnViewChangedInternal"
                                        />
                    </RadzenFormField>
                </RadzenColumn>
            }
            
            @* BLOQUE 2: Buscador + Botones *@
            <RadzenColumn SizeLG="@GetMainContentColumnSize()" SizeMD="@GetMainContentColumnSizeMD()" SizeSM="12" SizeXS="12" Class="@GetMainContentClass()">
                @* Layout responsivo: Horizontal en desktop, vertical en móvil *@
                <RadzenStack Orientation="@GetStackOrientation()" AlignItems="@GetStackAlignment()" Gap="0.5rem" 
                             JustifyContent="@GetStackJustification()" Style="width: 100%;" Wrap="FlexWrap.Wrap">
                    
                    @* Buscador *@
                    @if (ShowSearchBar)
                    {
                        <div class="@GetSearchContainerClass()">
                            <RadzenFormField Style="margin-top: 10px; width: 100%;">
                                <ChildContent>
                                    <RadzenTextBox @oninput=@(async arg => { searchTerm = arg.Value is null ? "" : arg.Value.ToString(); })
                                                   Placeholder="@SearchPlaceholder"
                                                   @onkeypress="@OnSearchKeyPress" 
                                                   Style="width: 100%;" />
                                </ChildContent>
                                <End>
                                    <RadzenButton Icon="search"
                                                  Click="@OnSearchSubmit"
                                                  Variant="Variant.Text"
                                                  Size="ButtonSize.Small" />
                                </End>
                            </RadzenFormField>
                            
                            @if (ShowSearchFieldsInput)
                            {
                                <RadzenFormField class="mt-2" Style="width: 100%;">
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="currentSearchFieldsInput"
                                                       Placeholder="Campos de búsqueda (ej: Nombre,Descripcion)"
                                                       Style="font-size: 12px; width: 100%;" />
                                    </ChildContent>
                                    <End>
                                        <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                            Campos
                                        </RadzenText>
                                    </End>
                                </RadzenFormField>
                            }
                        </div>
                    }
                    
                    @* Botones *@
                    <div class="@GetButtonsContainerClass()">
                    @if (ShowAutoRefresh)
                    {
                        <RadzenSplitButton Click="@(async (item) => await OnSplitButtonClick(item, "AutoRefresh"))"
                                           ButtonStyle="ButtonStyle.Base"
                                           Size="ButtonSize.Small"
                                           Icon="refresh"
                                           Text="@GetRefreshText()">
                            <ChildContent>
                                <RadzenSplitButtonItem Text="Detener auto-actualización" 
                                                       Value="0" />
                                @foreach (var interval in AutoRefreshIntervals)
                                {
                                    <RadzenSplitButtonItem Text="@GetAutoRefreshLabel(interval)" 
                                                           Value="@interval.ToString()" />
                                }
                            </ChildContent>
                        </RadzenSplitButton>
                    }
                    else if (ShowRefreshButton)
                    {
                        <RadzenButton Click="@ManualRefresh"
                                      ButtonStyle="ButtonStyle.Base"
                                      Size="ButtonSize.Small"
                                      Icon="refresh"
                                      title="@RefreshButtonText" />
                    }
                    
                    @if (ShowColumnConfig)
                    {
                        <RadzenButton Click="@OpenColumnConfigModal"
                                      ButtonStyle="ButtonStyle.Base"
                                      Size="ButtonSize.ExtraSmall"
                                      Style="padding: 6px; border-radius: 4px;"
                                      Icon="view_column"
                                      title="@ColumnConfigButtonText" />
                    }
                    
                    @if (ShowExcelExport)
                    {
                        <RadzenButton Click="@ExportToExcel"
                                      ButtonStyle="ButtonStyle.Base"
                                      Size="ButtonSize.ExtraSmall"
                                      Style="padding: 6px; border-radius: 4px; margin-left: 10px"
                                      Icon="download"
                                      IconColor="green"
                                      title="@ExcelButtonText" />
                    }
                    </div>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    }

    <RadzenDataGrid @ref="grid"
                    TItem="T"
                    Data="@entities"
                    Count="@totalCount"
                    LoadData="@LoadData"
                    AllowPaging="@AllowPaging"
                    AllowSorting="false"
                    AllowFiltering="false"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    LogicalFilterOperator="LogicalFilterOperator.And"
                    FilterDelay="500"
                    AllowColumnResize="@AllowColumnResize"
                    PageSize="@PageSize"
                    PageSizeOptions="@PageSizeOptions"
                    ShowPagingSummary="@ShowPagingSummary"
                    PagerHorizontalAlign="@PagerHorizontalAlign"
                    EmptyText="@EmptyText"
                    Style="@Style"
                    IsLoading="@isLoading"
                    ColumnWidth="@ColumnWidth"
                    AndOperatorText="Y"
                    OrOperatorText="O"
                    EqualsText="Igual a"
                    NotEqualsText="No es igual a"
                    LessThanText="Menor que"
                    LessThanOrEqualsText="Menor que o igual"
                    GreaterThanText="Mayor que"
                    GreaterThanOrEqualsText="Mayor que o igual"
                    IsNullText="Es nulo"
                    IsNotNullText="No es nulo"
                    ContainsText="Contiene"
                    DoesNotContainText="No contiene"
                    StartsWithText="Inicia con"
                    EndsWithText="Termina con"
                    ClearFilterText="Limpiar"
                    ApplyFilterText="Aplicar"
                    FilterText="Filtrar"
                    PageSizeText="Items por página"
                    PagingSummaryFormat="Páginas {0} de {1} ({2} items)"
                    
                    
                    
                    
                    >

        <Columns>
            @if (ShowActions)
            {
                <RadzenDataGridColumn TItem="T"
                                      Sortable="false"
                                      Filterable="false"
                                      Width="@ActionsColumnWidth"
                                      TextAlign="TextAlign.Center"
                                      Frozen="@FreezeActionsColumn">
                    <HeaderTemplate>
                        <span>@ActionsColumnTitle</span>
                    </HeaderTemplate>
                    <Template Context="item">
                        @if (CustomActions != null)
                        {
                            @CustomActions(item)
                        }
                        else
                        {
                            @if (ShowEditButton)
                            {
                                <RadzenButton Icon="@EditIcon"
                                              ButtonStyle="@EditButtonStyle"
                                              Size="ButtonSize.Small"
                                              Click="@(() => HandleEdit(item))"
                                              class="me-1" Style="margin-right: 10px" />
                            }
                            @if (ShowDeleteButton)
                            {
                                <RadzenButton Icon="@DeleteIcon"
                                              ButtonStyle="@DeleteButtonStyle"
                                              Size="ButtonSize.Small"
                                              Click="@(() => HandleDelete(item))" />
                            }
                        }
                    </Template>
                </RadzenDataGridColumn>
            }

            @if (ColumnConfigs != null && ColumnConfigs.Any())
            {
                @* Renderizar columnas desde ColumnConfigs (ordenadas por Order) *@
                @foreach (var col in ColumnConfigs.OrderBy(c => c.Order ?? 999))
                {
                    @if (col.Template != null)
                    {
                        <RadzenDataGridColumn TItem="T"
                                              Property="@col.Property"
                                              Width="@col.Width"
                                              Sortable="false"
                                              Filterable="true"
                                              TextAlign="@col.TextAlign"
                                              Frozen="@col.Frozen"
                                              Visible="@col.Visible">
                            <HeaderTemplate>
                                <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                                    <div style="display: flex; align-items: center; gap: 0.3rem;">
                                        <RadzenButton Icon="filter_alt" 
                                                      Size="ButtonSize.ExtraSmall" 
                                                      ButtonStyle="@(IsFilterActive(col.Property) ? ButtonStyle.Primary : ButtonStyle.Light)"
                                                      Click="@(() => OpenCustomFilter(col.Property, GetPropertyType(col.Property)))" 
                                                      Title="Filtro personalizado"
                                                      Style="padding: 1px 3px;" />
                                        <span>@col.Title</span>
                                    </div>
                                    <RadzenButton Icon="@GetSortIcon(col.Property)" 
                                                  Size="ButtonSize.ExtraSmall" 
                                                  ButtonStyle="@(IsSortActive(col.Property) ? ButtonStyle.Secondary : ButtonStyle.Light)"
                                                  Click="@(() => ToggleSort(col.Property))" 
                                                  Title="@GetSortTitle(col.Property)"
                                                  Style="padding: 1px 3px;" />
                                </div>
                            </HeaderTemplate>
                            <Template Context="item">
                                @col.Template(item)
                            </Template>
                        </RadzenDataGridColumn>
                    }
                    else
                    {
                        <RadzenDataGridColumn TItem="T"
                                              Property="@col.Property"
                                              Width="@col.Width"
                                              Sortable="false"
                                              Filterable="true"
                                              TextAlign="@col.TextAlign"
                                              Frozen="@col.Frozen"
                                              Visible="@col.Visible">
                            <HeaderTemplate>
                                <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                                    <div style="display: flex; align-items: center; gap: 0.3rem;">
                                        <RadzenButton Icon="filter_alt" 
                                                      Size="ButtonSize.ExtraSmall" 
                                                      ButtonStyle="@(IsFilterActive(col.Property) ? ButtonStyle.Primary : ButtonStyle.Light)"
                                                      Click="@(() => OpenCustomFilter(col.Property, GetPropertyType(col.Property)))" 
                                                      Title="Filtro personalizado"
                                                      Style="padding: 1px 3px;" />
                                        <span>@col.Title</span>
                                    </div>
                                    <RadzenButton Icon="@GetSortIcon(col.Property)" 
                                                  Size="ButtonSize.ExtraSmall" 
                                                  ButtonStyle="@(IsSortActive(col.Property) ? ButtonStyle.Secondary : ButtonStyle.Light)"
                                                  Click="@(() => ToggleSort(col.Property))" 
                                                  Title="@GetSortTitle(col.Property)"
                                                  Style="padding: 1px 3px;" />
                                </div>
                            </HeaderTemplate>
                        </RadzenDataGridColumn>
                    }
                }
            }
            else if (Columns != null)
            {
                @* Fallback: RenderFragment Columns si no hay ColumnConfigs *@
                @Columns
            }
            else
            {
                @* Generar columnas automáticas usando reflexión *@
                @foreach (var prop in GetAutoColumns())
                {
                    <RadzenDataGridColumn TItem="T"
                                          Property="@prop.Name"
                                          Sortable="false"
                                          Filterable="true">
                        <HeaderTemplate>
                            <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                                <div style="display: flex; align-items: center; gap: 0.3rem;">
                                    <RadzenButton Icon="filter_alt" 
                                                  Size="ButtonSize.ExtraSmall" 
                                                  ButtonStyle="@(IsFilterActive(prop.Name) ? ButtonStyle.Primary : ButtonStyle.Light)"
                                                  Click="@(() => OpenCustomFilter(prop.Name, prop.PropertyType))" 
                                                  Title="Filtro personalizado"
                                                  Style="padding: 1px 3px;" />
                                    <span>@GetDisplayName(prop.Name)</span>
                                </div>
                                <RadzenButton Icon="@GetSortIcon(prop.Name)" 
                                              Size="ButtonSize.ExtraSmall" 
                                              ButtonStyle="@(IsSortActive(prop.Name) ? ButtonStyle.Secondary : ButtonStyle.Light)"
                                              Click="@(() => ToggleSort(prop.Name))" 
                                              Title="@GetSortTitle(prop.Name)"
                                              Style="padding: 1px 3px;" />
                            </div>
                        </HeaderTemplate>
                    </RadzenDataGridColumn>
                }
            }
        </Columns>
    </RadzenDataGrid>
</div>

<style>
    .entity-table-container {
        width: 100%;
        position: relative;
    }
    
    /* Responsive styles para mejor layout en móvil */
    .search-container {
        min-width: 250px;
    }
    
    /* Fix para el icono de filtro que se superpone */
    .notranslate.rzi.rz-grid-filter-icon {
        margin-left: -25px !important;
    }
    
    @@media (max-width: 767px) {
        .search-container {
            min-width: 100%;
            margin-bottom: 10px;
        }
        
        /* En móvil, el buscador toma todo el ancho */
        .search-container .rz-formfield {
            width: 100%;
        }
        
        /* Botones centrados en móvil */
        .entity-table-container .gap-2 {
            flex-wrap: wrap;
            justify-content: center !important;
        }
    }
    
    @@media (min-width: 768px) {
        /* En desktop, mantener el layout original */
        .search-container {
            flex-shrink: 0;
        }
    }
</style>