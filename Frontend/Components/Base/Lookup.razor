@typeparam TEntity where TEntity : class
@typeparam TValue
@using Radzen
@using Radzen.Blazor
@using Frontend.Services
@using Shared.Models.QueryModels
@using Shared.Models.Entities
@using Shared.Models.Responses
@using System.Linq.Expressions
@inject DialogService DialogService
@inject CacheService CacheService

<div class="lookup-container">
    <RadzenDropDownDataGrid @bind-Value="Value" 
                           Data="@_data"
                           LoadData="@LoadData"
                           TValue="TValue"
                           TextProperty="@DisplayProperty"
                           ValueProperty="@ValueProperty"
                           Placeholder="@Placeholder"
                           AllowClear="@AllowClear"
                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                           FilterOperator="StringFilterOperator.Contains"
                           AllowFiltering="@ShowSearch"
                           ShowSearch=@ShowSearch
                            ShowAdd="@(ShowAdd && FastCreateComponentType is not null)"
                           Add="@HandleAdd"
                           PageSize="10"
                           Disabled=@Disabled
                           Style="width: 100%;"
                           Change="@OnValueChanged">
        
        <Columns>
            @if (ColumnsTemplate != null)
            {
                @ColumnsTemplate
            }
            else
            {
                <RadzenDropDownDataGridColumn Property="@DisplayProperty" Title="@DisplayProperty" Width="100%" />
            }
        </Columns>
        
    </RadzenDropDownDataGrid>
</div>

@code {
    [Parameter] public TValue Value { get; set; } = default!;
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public BaseApiService<TEntity> Service { get; set; } = null!;
    [Parameter] public string DisplayProperty { get; set; } = "Nombre";
    [Parameter] public string ValueProperty { get; set; } = "Id";
    [Parameter] public string Placeholder { get; set; } = "Seleccionar...";
    [Parameter] public bool AllowClear { get; set; } = true;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public string EntityDisplayName { get; set; } = "elemento";
    [Parameter] public RenderFragment? ColumnsTemplate { get; set; }
    [Parameter] public Type? FastCreateComponentType { get; set; }
    
    // QueryBuilder como filtro base fuertemente tipado
    [Parameter] public QueryBuilder<TEntity>? BaseQuery { get; set; }
    
    // Control del botón + y búsqueda
    [Parameter] public bool ShowAdd { get; set; } = true;
    [Parameter] public EventCallback Add { get; set; }
    [Parameter] public bool ShowSearch { get; set; } = true;
    
    // Configuración del modal
    [Parameter] public string ModalWidth { get; set; } = "400px";
    [Parameter] public string ModalHeight { get; set; } = "600px";
    [Parameter] public bool AutoHeight { get; set; } = true;
    
    // OnLoad personalizado
    [Parameter] public Func<LoadDataArgs, QueryBuilder<TEntity>?, Task<ApiResponse<PagedResult<TEntity>>>>? OnLoad { get; set; }
    
    // Parámetros de Cache
    [Parameter] public bool EnableCache { get; set; } = false;
    [Parameter] public TimeSpan? CacheTTL { get; set; } = TimeSpan.FromMinutes(5);
    [Parameter] public string? CacheKey { get; set; }
    
    // Campos buscables fuertemente tipados
    [Parameter] public Expression<Func<TEntity, object>>[]? SearchableFields { get; set; }

    private IEnumerable<TEntity>? _data;
    private bool _isLoading = false;
    private int _count = 0;
    private bool _initialValueLoaded = false;

    protected override async Task OnParametersSetAsync()
    {
        // Si hay un valor inicial y no se ha cargado, obtenerlo específicamente
        if (!_initialValueLoaded && Value != null && !EqualityComparer<TValue>.Default.Equals(Value, default(TValue)))
        {
            await LoadInitialValue();
            _initialValueLoaded = true;
        }
    }

    private async Task LoadInitialValue()
    {
        try
        {
            // Convertir el Value a Guid para buscar por ID
            if (Value is Guid guidValue && guidValue != Guid.Empty)
            {
                var response = await Service.GetByIdAsync(guidValue);
                if (response.Success && response.Data != null)
                {
                    // Crear una lista con solo el elemento inicial
                    _data = new List<TEntity> { response.Data };
                    _count = 1;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            // Si falla, no hacer nada, LoadData manejará la carga normal
        }
    }

    private async Task LoadData(LoadDataArgs args)
    {
        try
        {
            _isLoading = true;
            
            if (EnableCache)
            {
                // CACHE: Cargar TODOS los datos una vez y filtrar en memoria
                await LoadAllDataToCache(args);
            }
            else
            {
                // SIN CACHE: Lógica normal (paginado)
                await LoadDataNormal(args);
            }
        }
        catch (Exception ex)
        {
            _data = new List<TEntity>();
            _count = 0;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadAllDataToCache(LoadDataArgs args)
    {
        var cacheKey = GenerateFullDataCacheKey();
        
        // Obtener TODOS los datos (sin paginación)
        var allData = await CacheService.GetOrSetAsync(
            cacheKey,
            async () => await LoadCompleteDataset(),
            CacheTTL
        );
        
        if (allData != null && allData.Any())
        {
            // Filtrar EN MEMORIA
            var filteredData = FilterDataInMemory(allData, args);
            
            // Aplicar paginación EN MEMORIA
            var pagedData = ApplyPaginationInMemory(filteredData, args);
            
            _data = pagedData;
            _count = filteredData.Count(); // Total después del filtro
        }
        else
        {
            _data = new List<TEntity>();
            _count = 0;
        }
    }

    private async Task LoadDataNormal(LoadDataArgs args)
    {
        // Lógica original sin cache
        ApiResponse<PagedResult<TEntity>> response;
        
        if (OnLoad != null)
        {
            // Preparar query combinado para pasar al OnLoad personalizado
            QueryBuilder<TEntity>? finalQuery = null;
            
            if (BaseQuery != null)
            {
                // Crear nuevo QueryBuilder que combine BaseQuery + filtros de RadzenDropDownDataGrid
                var searchQuery = Service.Query();
                
                // Si hay filtro de búsqueda de Radzen, agregarlo
                if (!string.IsNullOrEmpty(args.Filter))
                {
                    searchQuery = searchQuery.Search(args.Filter);
                }
                
                // Combinar BaseQuery (inmutable) + searchQuery usando AND
                finalQuery = BaseQuery.And(searchQuery);
            }
            
            // Llamar al OnLoad personalizado
            response = await OnLoad(args, finalQuery);
        }
        else
        {
            // Lógica por defecto
            if (BaseQuery != null)
            {
                // Crear nuevo QueryBuilder que combine BaseQuery + filtros de RadzenDropDownDataGrid
                var searchQuery = Service.Query();
                
                // Si hay filtro de búsqueda de Radzen, agregarlo
                if (!string.IsNullOrEmpty(args.Filter))
                {
                    searchQuery = searchQuery.Search(args.Filter);
                }
                
                // Combinar BaseQuery (inmutable) + searchQuery usando AND
                var combinedQuery = BaseQuery.And(searchQuery);
                
                response = await Service.LoadDataAsync(args, combinedQuery);
            }
            else
            {
                response = await Service.LoadDataAsync(args);
            }
        }
        
        if (response.Success && response.Data != null)
        {
            var newData = response.Data.Data?.ToList() ?? new List<TEntity>();
            
            // Si hay un valor seleccionado y NO hay filtro de búsqueda activo, asegurar que esté en la lista
            if (Value != null && !EqualityComparer<TValue>.Default.Equals(Value, default(TValue)) && 
                string.IsNullOrEmpty(args.Filter))
            {
                var valueProperty = typeof(TEntity).GetProperty(ValueProperty);
                if (valueProperty != null)
                {
                    var selectedExists = newData.Any(item =>
                    {
                        var itemValue = valueProperty.GetValue(item);
                        return itemValue != null && itemValue.Equals(Value);
                    });
                    
                    // Si el elemento seleccionado no está en los resultados, agregarlo
                    if (!selectedExists && _data != null)
                    {
                        var currentSelected = _data.FirstOrDefault(item =>
                        {
                            var itemValue = valueProperty.GetValue(item);
                            return itemValue != null && itemValue.Equals(Value);
                        });
                        
                        if (currentSelected != null)
                        {
                            newData.Insert(0, currentSelected);
                        }
                    }
                }
            }
            
            _data = newData;
            _count = response.Data.TotalCount;
        }
        else
        {
            _data = new List<TEntity>();
            _count = 0;
        }
    }

    private async Task<List<TEntity>> LoadCompleteDataset()
    {
        // Crear args para traer TODO (sin paginación)
        var allDataArgs = new LoadDataArgs 
        { 
            Skip = 0, 
            Top = 50000, // Límite alto para traer todo
            Filter = null // Sin filtro para traer todo
        };
        
        ApiResponse<PagedResult<TEntity>> response;
        
        if (OnLoad != null)
        {
            // Usar OnLoad personalizado pero sin filtros
            response = await OnLoad(allDataArgs, BaseQuery);
        }
        else
        {
            // Lógica por defecto
            response = BaseQuery != null 
                ? await Service.LoadDataAsync(allDataArgs, BaseQuery)
                : await Service.LoadDataAsync(allDataArgs);
        }
        
        return response.Success && response.Data?.Data != null 
            ? response.Data.Data.ToList() 
            : new List<TEntity>();
    }

    private IEnumerable<TEntity> FilterDataInMemory(List<TEntity> allData, LoadDataArgs args)
    {
        var filteredData = allData.AsEnumerable();
        
        // Aplicar filtro de búsqueda EN MEMORIA
        if (!string.IsNullOrEmpty(args.Filter))
        {
            var searchTerm = args.Filter.ToLowerInvariant();
            
            filteredData = filteredData.Where(item =>
            {
                // Si hay campos específicos configurados, buscar solo en esos
                if (SearchableFields != null && SearchableFields.Any())
                {
                    foreach (var fieldExpression in SearchableFields)
                    {
                        var propertyName = GetPropertyNameFromExpression(fieldExpression);
                        var value = GetPropertyValue(item, propertyName)?.ToString()?.ToLowerInvariant();
                        if (!string.IsNullOrEmpty(value) && value.Contains(searchTerm))
                            return true;
                    }
                    return false;
                }
                else
                {
                    // Comportamiento por defecto: buscar en DisplayProperty + otras string properties
                    var displayValue = GetPropertyValue(item, DisplayProperty)?.ToString()?.ToLowerInvariant();
                    if (!string.IsNullOrEmpty(displayValue) && displayValue.Contains(searchTerm))
                        return true;
                    
                    // Buscar en otras propiedades string
                    var stringProperties = typeof(TEntity).GetProperties()
                        .Where(p => p.PropertyType == typeof(string));
                        
                    foreach (var prop in stringProperties)
                    {
                        var value = prop.GetValue(item)?.ToString()?.ToLowerInvariant();
                        if (!string.IsNullOrEmpty(value) && value.Contains(searchTerm))
                            return true;
                    }
                    
                    return false;
                }
            });
        }
        
        // Aplicar ordenamiento EN MEMORIA si es necesario
        if (args.Sorts != null && args.Sorts.Any())
        {
            foreach (var sort in args.Sorts)
            {
                if (!string.IsNullOrEmpty(sort.Property))
                {
                    filteredData = sort.SortOrder == SortOrder.Descending
                        ? filteredData.OrderByDescending(item => GetPropertyValue(item, sort.Property))
                        : filteredData.OrderBy(item => GetPropertyValue(item, sort.Property));
                }
            }
        }
        
        return filteredData;
    }

    private IEnumerable<TEntity> ApplyPaginationInMemory(IEnumerable<TEntity> data, LoadDataArgs args)
    {
        var skip = args.Skip ?? 0;
        var take = args.Top ?? 10;
        
        return data.Skip(skip).Take(take);
    }

    private object? GetPropertyValue(TEntity entity, string propertyName)
    {
        return typeof(TEntity).GetProperty(propertyName)?.GetValue(entity);
    }

    private string GetPropertyNameFromExpression(Expression<Func<TEntity, object>> expression)
    {
        return expression.Body switch
        {
            MemberExpression member => member.Member.Name,
            UnaryExpression { Operand: MemberExpression member } => member.Member.Name,
            _ => throw new ArgumentException($"Expression '{expression}' is not a valid property expression.")
        };
    }

    private string GenerateFullDataCacheKey()
    {
        if (!string.IsNullOrEmpty(CacheKey))
        {
            return $"lookup_full_{CacheKey}";
        }
        
        var entityType = typeof(TEntity).Name;
        var baseQueryHash = BaseQuery?.GetHashCode() ?? 0;
        var serviceHash = Service.GetType().Name.GetHashCode();
        
        return $"lookup_full_{entityType}_{serviceHash}_{baseQueryHash}";
    }

    private async Task OnValueChanged(object value)
    {
        Value = (TValue)value;
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task HandleAdd()
    {
        // Si hay un callback personalizado, usarlo
        if (Add.HasDelegate)
        {
            await Add.InvokeAsync();
            
            // Si hay cache habilitado, invalidar para recargar
            if (EnableCache)
            {
                InvalidateCache();
                // Recargar datos inmediatamente
                await LoadData(new LoadDataArgs { Skip = 0, Top = 10 });
            }
        }
        // Si no, usar el comportamiento por defecto (FastCreateComponentType)
        else if (FastCreateComponentType != null)
        {
            var dialogOptions = new DialogOptions 
            { 
                Width = ModalWidth,
                Resizable = false,
                Draggable = false,
                Style = "max-width: 100%; max-height: 100%"
            };
            
            // Solo establecer Height si AutoHeight está deshabilitado
            if (!AutoHeight)
            {
                dialogOptions.Height = ModalHeight;
            }

            var result = await DialogService.OpenAsync(
                $"Crear {EntityDisplayName}",
                FastCreateComponentType,
                new Dictionary<string, object>(),
                dialogOptions);

            // Si se creó exitosamente, agregar a la lista y seleccionar
            if (result != null)
            {
                if (result is TEntity newEntity)
                {
                    if (EnableCache)
                    {
                        // Con cache: Invalidar y recargar todo
                        InvalidateCache();
                        await LoadData(new LoadDataArgs { Skip = 0, Top = 10 });
                        
                        // Luego seleccionar el nuevo elemento
                        SelectNewEntity(newEntity);
                    }
                    else
                    {
                        // Sin cache: Agregar directamente a la lista (lógica actual)
                        var currentList = _data?.ToList() ?? new List<TEntity>();
                        currentList.Add(newEntity);
                        _data = currentList;
                        _count++;
                        SelectNewEntity(newEntity);
                    }
                    
                    StateHasChanged();
                }
            }
        }
    }

    private void SelectNewEntity(TEntity newEntity)
    {
        var valueProperty = typeof(TEntity).GetProperty(ValueProperty);
        if (valueProperty != null)
        {
            var newValue = valueProperty.GetValue(newEntity);
            if (newValue != null)
            {
                Value = (TValue)newValue;
                if (ValueChanged.HasDelegate)
                {
                    ValueChanged.InvokeAsync(Value);
                }
            }
        }
    }

    public void InvalidateCache()
    {
        if (EnableCache)
        {
            var pattern = !string.IsNullOrEmpty(CacheKey) 
                ? $"lookup_full_{CacheKey}" 
                : $"lookup_full_{typeof(TEntity).Name}_";
                
            CacheService.RemoveByPattern(pattern);
        }
    }

    public async Task RefreshData()
    {
        // Refrescar datos del dropdown
        await LoadData(new LoadDataArgs { Skip = 0, Top = 10 });
        StateHasChanged();
    }
}

<style>
    .lookup-container {
        position: relative;
        width: 100%;
    }
</style>