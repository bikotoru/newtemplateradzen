@inject IJSRuntime JSRuntime
    <div class="essentials-card @(IsSelected ? "card-selected" : "")">
        <div class="card-header @(IsSelected ? "selected" : "")" @onclick="HandleHeaderClick">
            <div class="header-left" @onclick="ToggleCollapsed" @onclick:stopPropagation="true">
                <span class="header-icon @(_isCollapsed ? "collapsed" : "")">@(_isCollapsed ? "▶" : "▼")</span>
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <RadzenIcon Icon="@Icon" Style="@($"margin-right: 8px; font-size: 14px;" + (!string.IsNullOrEmpty(IconColor) ? $" color: {IconColor};" : ""))" />
                }
                <span class="header-title">@Title</span>
            </div>

            <div class="header-right">
                @if (ShowHeaderTemplate && HeaderTemplate != null)
                {
                    <div class="header-template">
                        @HeaderTemplate
                    </div>
                }

                @if (ShowActionButtons)
                {
                    <div class="action-buttons">
                        @if (ShowSelectButton)
                        {
                            <RadzenButton Icon="@(IsSelected ? "check_circle" : "radio_button_unchecked")"
                                        Size="ButtonSize.ExtraSmall"
                                        Variant="@(IsSelected ? Variant.Filled : Variant.Text)"
                                        ButtonStyle="@(IsSelected ? ButtonStyle.Success : ButtonStyle.Base)"
                                        Click="HandleSelectClick"
                                        Title="@(IsSelected ? "Seleccionado" : "Seleccionar")"
                                        @onclick:stopPropagation="true" />
                        }
                        @if (ShowSettingsButton)
                        {
                            <RadzenButton Icon="settings"
                                        Size="ButtonSize.ExtraSmall"
                                        Variant="Variant.Text"
                                        Click="HandleSettingsClick"
                                        Title="Configurar"
                                        @onclick:stopPropagation="true" />
                        }
                        @if (ShowDeleteButton)
                        {
                            <RadzenButton Icon="delete"
                                        Size="ButtonSize.ExtraSmall"
                                        Variant="Variant.Text"
                                        ButtonStyle="ButtonStyle.Danger"
                                        Click="HandleDeleteClick"
                                        Title="Eliminar"
                                        @onclick:stopPropagation="true" />
                        }
                    </div>
                }
            </div>
        </div>

        <div class="card-content @(_isCollapsed ? "collapsed" : "")">
            @if (ShowEssentials && EssentialsTemplate != null)
            {
                <div class="essentials-section">
                    @EssentialsTemplate
                </div>
            }

            @if (ChildContent != null)
            {
                <div class="@(ShowEssentials && EssentialsTemplate != null ? "form-section" : "")">
                    @ChildContent
                </div>
            }
        </div>
    </div>


@code {
    [Parameter] public string Title { get; set; } = "Detalles";
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public string IconColor { get; set; } = "";
    [Parameter] public bool IsCollapsed { get; set; } = false;
    [Parameter] public bool ShowHeaderTemplate { get; set; } = false;
    [Parameter] public bool ShowEssentials { get; set; } = false;
    [Parameter] public RenderFragment? HeaderTemplate { get; set; }
    [Parameter] public RenderFragment? EssentialsTemplate { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<bool> OnCollapsedChanged { get; set; }

    // Nuevos parámetros para botones de acción
    [Parameter] public bool ShowActionButtons { get; set; } = false;
    [Parameter] public bool ShowSelectButton { get; set; } = false;
    [Parameter] public bool ShowSettingsButton { get; set; } = false;
    [Parameter] public bool ShowDeleteButton { get; set; } = false;
    [Parameter] public bool IsSelected { get; set; } = false;
    [Parameter] public bool IsSelectable { get; set; } = false;
    [Parameter] public EventCallback OnSelectClick { get; set; }
    [Parameter] public EventCallback OnSettingsClick { get; set; }
    [Parameter] public EventCallback OnDeleteClick { get; set; }
    [Parameter] public EventCallback OnCardClick { get; set; }

    private bool _isCollapsed;

    protected override void OnInitialized()
    {
        _isCollapsed = IsCollapsed;
    }

    private async Task ToggleCollapsed()
    {
        _isCollapsed = !_isCollapsed;
        if (OnCollapsedChanged.HasDelegate)
        {
            await OnCollapsedChanged.InvokeAsync(_isCollapsed);
        }
    }

    private async Task HandleSelectClick()
    {
        if (OnSelectClick.HasDelegate)
        {
            await OnSelectClick.InvokeAsync();
        }
    }

    private async Task HandleSettingsClick()
    {
        if (OnSettingsClick.HasDelegate)
        {
            await OnSettingsClick.InvokeAsync();
        }
    }

    private async Task HandleDeleteClick()
    {
        if (OnDeleteClick.HasDelegate)
        {
            await OnDeleteClick.InvokeAsync();
        }
    }

    private async Task HandleHeaderClick()
    {
        if (IsSelectable && OnCardClick.HasDelegate)
        {
            await OnCardClick.InvokeAsync();
        }
    }
}

<style>
    .essentials-card {
        background: white;
        border: 1px solid #e1e1e1;
        border-radius: 2px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 16px;
        transition: all 0.2s ease;
    }

    .essentials-card.card-selected {
        border-color: #0078d4;
        box-shadow: 0 0 0 1px #0078d4, 0 8px 24px rgba(0, 120, 212, 0.15);
        transform: translateY(-2px);
    }

    body.dark-theme .essentials-card,
    [data-theme="dark"] .essentials-card {
        background: #1e1e1e;
        border-color: #3c3c3c;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    body.dark-theme .essentials-card.card-selected,
    [data-theme="dark"] .essentials-card.card-selected {
        border-color: #106ebe;
        box-shadow: 0 0 0 1px #106ebe, 0 8px 24px rgba(16, 110, 190, 0.2);
        transform: translateY(-2px);
    }

    .card-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 16px;
        background: #f8f9fa;
        border-bottom: 1px solid #e1e1e1;
        cursor: pointer;
        user-select: none;
        transition: all 0.2s ease;
    }

    .card-header.selected {
        background: linear-gradient(135deg, #e6f3ff 0%, #cce7ff 100%);
        border-color: #0078d4;
        box-shadow: 0 0 0 2px #0078d4, 0 4px 12px rgba(0, 120, 212, 0.2);
        transform: translateY(-1px);
    }

    body.dark-theme .card-header,
    [data-theme="dark"] .card-header {
        background: #2d2d2d;
        border-bottom-color: #3c3c3c;
    }

    body.dark-theme .card-header.selected,
    [data-theme="dark"] .card-header.selected {
        background: linear-gradient(135deg, #1a3a5c 0%, #0d2d4a 100%);
        border-color: #106ebe;
        box-shadow: 0 0 0 2px #106ebe, 0 4px 12px rgba(16, 110, 190, 0.3);
        transform: translateY(-1px);
    }

    .card-header:hover {
        background: #f0f2f5;
    }

    body.dark-theme .card-header:hover,
    [data-theme="dark"] .card-header:hover {
        background: #333333;
    }

    .header-icon {
        margin-right: 8px;
        transition: transform 0.3s ease;
        font-size: 12px;
        color: #666;
        flex-shrink: 0;
    }

    body.dark-theme .header-icon,
    [data-theme="dark"] .header-icon {
        color: #999;
    }

    .header-icon.collapsed {
        transform: rotate(-90deg);
    }

    .header-title {
        font-size: 14px;
        font-weight: 600;
        color: #323130;
        flex: 1;
    }

    body.dark-theme .header-title,
    [data-theme="dark"] .header-title {
        color: #e1e1e1;
    }

    .header-left {
        display: flex;
        align-items: center;
        flex: 1;
    }

    .header-right {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .header-template {
        margin-right: 8px;
    }

    .action-buttons {
        display: flex;
        align-items: center;
        gap: 2px;
        opacity: 0;
        transition: opacity 0.2s ease;
    }

    .card-header:hover .action-buttons {
        opacity: 1;
    }

    .action-buttons .rz-button {
        padding: 4px;
        min-width: 24px;
        min-height: 24px;
    }

    .card-content {
        padding: 16px;
        max-height: 1000px;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .card-content.collapsed {
        max-height: 0;
        padding: 0 16px;
    }

    .essentials-section {
        margin-bottom: 16px;
    }

    .form-section {
        border-top: 1px solid #f3f2f1;
        padding-top: 16px;
    }

    body.dark-theme .form-section,
    [data-theme="dark"] .form-section {
        border-top-color: #3c3c3c;
    }
</style>