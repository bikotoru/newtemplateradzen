@using Frontend.Services
@using Frontend.Components.Base
@using Frontend.Layout.Menu
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject AuthService AuthService
@implements IDisposable

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Gap="1rem">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
                <RadzenText TextStyle="TextStyle.H4" Style="margin: 0;">Sistema Empresarial</RadzenText>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                <!-- Theme Toggle Component -->
                <ThemeToggle />
                
                <AuthorizeView>
                    <Authorized>
                        <RadzenText TextStyle="TextStyle.Body2" Style="margin: 0;">
                            Hola, @GetDisplayName()
                        </RadzenText>
                        <RadzenDropDown Data="@userMenuItems" 
                                       @bind-Value="@selectedMenuItem"
                                       Change="@OnMenuItemSelected"
                                       Placeholder="⚙️"
                                       Style="width: 40px;"
                                       AllowClear="false" />
                    </Authorized>
                    <NotAuthorized>
                        <RadzenLink Path="/" Text="Iniciar Sesión" />
                    </NotAuthorized>
                </AuthorizeView>
            </RadzenStack>
        </RadzenStack>
    </RadzenHeader>
    
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <MenuUnificado />
    </RadzenSidebar>
    
    <RadzenBody Style="padding: 0px !important">
        @Body
    </RadzenBody>
    
 
</RadzenLayout>

<RadzenComponents @rendermode="RenderMode.InteractiveWebAssembly" />

@code {
    bool sidebar1Expanded = true;
    
    private List<string> userMenuItems = new() { "Mi Perfil", "Configuración", "Cerrar Sesión" };
    private string? selectedMenuItem;

    protected override void OnInitialized()
    {
        try 
        {
            // Solo suscribirse a cambios en el estado de auth
            // NO inicializar el AuthService aquí para evitar bloqueos
            AuthService.OnAuthStateChanged += OnAuthStateChanged;
        }
        catch (Exception ex)
        {
        }
    }

    private async void OnAuthStateChanged()
    {
        try 
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
        }
    }

    private string GetDisplayName()
    {
        try
        {
            var name = AuthService.GetDisplayName();
            return name;
        }
        catch (Exception ex)
        {
            return "Usuario";
        }
    }

    private async Task OnMenuItemSelected(object value)
    {
        var menuItem = value?.ToString();
        
        switch (menuItem)
        {
            case "Mi Perfil":
                // Navegar a perfil
                break;
            case "Configuración":
                // Navegar a configuración
                break;
            case "Cerrar Sesión":
                await AuthService.LogoutAsync();
                break;
        }
        
        // Resetear selección
        selectedMenuItem = null;
    }


    public void Dispose()
    {
        try
        {
            AuthService.OnAuthStateChanged -= OnAuthStateChanged;
        }
        catch (Exception ex)
        {
        }
    }
}
