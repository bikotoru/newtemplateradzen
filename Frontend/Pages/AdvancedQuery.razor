@page "/advanced-query"
@using Radzen.Blazor
@using System.Text.Json
@inject AdvancedQueryService AdvancedQueryService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>Consulta Avanzada</PageTitle>

<RadzenStack Gap="1rem">
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                    <RadzenIcon Icon="search" Style="font-size: 2rem; color: var(--rz-primary);" />
                    <RadzenStack Gap="0.25rem">
                        <RadzenText TextStyle="TextStyle.H4" style="margin: 0;">Consulta Avanzada</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2" style="margin: 0; color: var(--rz-text-secondary-color);">
                            Crea consultas complejas con filtros anidados para cualquier entidad del sistema
                        </RadzenText>
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <!-- Selección de Entidad -->
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenStack Gap="1rem">
                    <RadzenText TextStyle="TextStyle.H6">1. Seleccionar Entidad</RadzenText>

                    <RadzenRow>
                        <RadzenColumn Size="6">
                            <RadzenDropDown @bind-Value="selectedEntityName"
                                          Data="@availableEntities"
                                          TextProperty="DisplayName"
                                          ValueProperty="EntityName"
                                          Placeholder="Selecciona una entidad..."
                                          Change="@OnEntitySelected"
                                          AllowClear="true"
                                          Style="width: 100%;" />
                        </RadzenColumn>
                        <RadzenColumn Size="6">
                            @if (!string.IsNullOrEmpty(selectedEntityName))
                            {
                                <RadzenButton Text="@($"{entityFields.Count} campos disponibles - Configurar")"
                                            Icon="settings"
                                            ButtonStyle="ButtonStyle.Info"
                                            Size="ButtonSize.Small"
                                            Click="@OpenFieldSelectionDialog" />
                            }
                        </RadzenColumn>
                    </RadzenRow>

                    @if (!string.IsNullOrEmpty(selectedEntity?.Description))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" Icon="info">
                            @selectedEntity.Description
                        </RadzenAlert>
                    }
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <!-- Configuración de Filtros -->
    @if (!string.IsNullOrEmpty(selectedEntityName) && entityFields.Any())
    {
        <RadzenRow>
            <RadzenColumn Size="12">
                <RadzenCard>
                    <RadzenStack Gap="1rem">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText TextStyle="TextStyle.H6">2. Configurar Filtros</RadzenText>

                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                                <RadzenButton Text="Cargar Configuración"
                                            Icon="folder_open"
                                            ButtonStyle="ButtonStyle.Light"
                                            Size="ButtonSize.Small"
                                            Click="@LoadConfiguration" />
                                <RadzenButton Text="Guardar Configuración"
                                            Icon="save"
                                            ButtonStyle="ButtonStyle.Light"
                                            Size="ButtonSize.Small"
                                            Click="@SaveConfiguration"
                                            Disabled="@(!dataFilter?.Filters?.Any() ?? true)" />
                            </RadzenStack>
                        </RadzenStack>

                        <!-- Configuración Global del Filtro -->
                        <RadzenRow>
                            <RadzenColumn Size="4">
                                <RadzenLabel Text="Operador Lógico Principal:" />
                                <RadzenSelectBar @bind-Value="logicalOperator" TValue="LogicalFilterOperator">
                                    <Items>
                                        <RadzenSelectBarItem Text="Y (AND)" Value="LogicalFilterOperator.And" />
                                        <RadzenSelectBarItem Text="O (OR)" Value="LogicalFilterOperator.Or" />
                                    </Items>
                                </RadzenSelectBar>
                            </RadzenColumn>
                            <RadzenColumn Size="4">
                                <RadzenLabel Text="Sensibilidad a Mayúsculas:" />
                                <RadzenSelectBar @bind-Value="filterCaseSensitivity" TValue="FilterCaseSensitivity">
                                    <Items>
                                        <RadzenSelectBarItem Text="Ignorar" Value="FilterCaseSensitivity.CaseInsensitive" />
                                        <RadzenSelectBarItem Text="Considerar" Value="FilterCaseSensitivity.Default" />
                                    </Items>
                                </RadzenSelectBar>
                            </RadzenColumn>
                            <RadzenColumn Size="4">
                                <RadzenLabel Text="Límite de Resultados:" />
                                <RadzenNumeric @bind-Value="takeLimit" Min="1" Max="1000" Style="width: 100%;" />
                            </RadzenColumn>
                        </RadzenRow>

                        <!-- RadzenDataFilter -->
                        <RadzenDataFilter @ref="dataFilter"
                                        TItem="object"
                                        LogicalFilterOperator="@logicalOperator"
                                        FilterCaseSensitivity="@filterCaseSensitivity"
                                        Auto="false">
                            <Properties>
                                @foreach (var field in entityFields.Where(f => f.IsSearchable))
                                {
                                    <RadzenDataFilterProperty Property="@field.PropertyName"
                                                            Title="@field.DisplayName"
                                                            Type="@field.PropertyType" />
                                }
                            </Properties>
                        </RadzenDataFilter>

                        <!-- Botones de Acción -->
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.Center">
                            <RadzenButton Text="Ejecutar Consulta"
                                        Icon="play_arrow"
                                        ButtonStyle="ButtonStyle.Primary"
                                        Size="ButtonSize.Medium"
                                        Click="@ExecuteQuery"
                                        Disabled="@(isLoading || !dataFilter?.Filters?.Any() == true)" />

                            <RadzenButton Text="Limpiar Filtros"
                                        Icon="clear"
                                        ButtonStyle="ButtonStyle.Light"
                                        Size="ButtonSize.Medium"
                                        Click="@ClearFilters" />

                            <RadzenButton Text="Ver Query SQL"
                                        Icon="code"
                                        ButtonStyle="ButtonStyle.Secondary"
                                        Size="ButtonSize.Medium"
                                        Click="@ShowGeneratedQuery"
                                        Disabled="@(!dataFilter?.Filters?.Any() ?? true)" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    }

    <!-- Resultados -->
    @if (queryResults != null && queryResults.Success)
    {
        <RadzenRow>
            <RadzenColumn Size="12">
                <RadzenCard>
                    <RadzenStack Gap="1rem">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText TextStyle="TextStyle.H6">3. Resultados</RadzenText>
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="@($"{queryResults.TotalCount} registros encontrados")" />
                        </RadzenStack>

                        @if (queryResults.Data.Any())
                        {
                            <!-- Tabla de Resultados Dinámica -->
                            <RadzenDataGrid Data="@queryResults.Data"
                                          TItem="object"
                                          AllowPaging="true"
                                          PageSize="20"
                                          AllowSorting="true"
                                          AllowColumnResize="true"
                                          GridLines="DataGridGridLines.Both"
                                          Style="height: 500px;">
                                <Columns>
                                    @foreach (var field in GetDisplayFields())
                                    {
                                        <RadzenDataGridColumn TItem="object"
                                                            Property="@field.PropertyName"
                                                            Title="@field.DisplayName"
                                                            Width="150px">
                                            <Template Context="data">
                                                @GetPropertyValue(data, field.PropertyName)
                                            </Template>
                                        </RadzenDataGridColumn>
                                    }
                                    <RadzenDataGridColumn TItem="object" Title="Acciones" Sortable="false" Width="100px">
                                        <Template Context="data">
                                            <RadzenButton Icon="visibility"
                                                        ButtonStyle="ButtonStyle.Light"
                                                        Size="ButtonSize.ExtraSmall"
                                                        Click="@(() => ViewDetails(data))"
                                                        title="Ver detalles" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        }
                        else
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Warning" Icon="warning">
                                No se encontraron resultados para la consulta especificada.
                            </RadzenAlert>
                        }
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    }

    <!-- Loading Indicator -->
    @if (isLoading)
    {
        <RadzenStack AlignItems="AlignItems.Center" Gap="1rem" Style="padding: 2rem;">
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            <RadzenText>Ejecutando consulta...</RadzenText>
        </RadzenStack>
    }
</RadzenStack>

@code {
    // State variables
    private List<AvailableEntityDto> availableEntities = new();
    private string? selectedEntityName;
    private AvailableEntityDto? selectedEntity;
    private List<EntityFieldDefinition> entityFields = new();
    private RadzenDataFilter<object>? dataFilter;
    private AdvancedQueryResult<object>? queryResults;
    private bool isLoading = false;

    // Filter configuration
    private LogicalFilterOperator logicalOperator = LogicalFilterOperator.And;
    private FilterCaseSensitivity filterCaseSensitivity = FilterCaseSensitivity.CaseInsensitive;
    private int takeLimit = 50;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableEntities();
    }

    private async Task LoadAvailableEntities()
    {
        try
        {
            isLoading = true;
            availableEntities = await AdvancedQueryService.GetAdvancedQueryEntitiesAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Error cargando entidades: {ex.Message}",
                Duration = 5000
            });
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnEntitySelected()
    {
        if (string.IsNullOrEmpty(selectedEntityName))
        {
            selectedEntity = null;
            entityFields.Clear();
            selectedFields.Clear(); // Limpiar selección de campos
            queryResults = null;
            return;
        }

        selectedEntity = availableEntities.FirstOrDefault(e => e.EntityName == selectedEntityName);

        try
        {
            isLoading = true;
            entityFields = await AdvancedQueryService.GetEntityFieldDefinitionsAsync(selectedEntityName);

            // Limpiar resultados anteriores y selección de campos
            queryResults = null;
            selectedFields.Clear();

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Entidad Cargada",
                Detail = $"Se cargaron {entityFields.Count} campos para {selectedEntity?.DisplayName}",
                Duration = 3000
            });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Error cargando campos: {ex.Message}",
                Duration = 5000
            });
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ExecuteQuery()
    {
        if (dataFilter?.Filters == null || !dataFilter.Filters.Any())
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Sin Filtros",
                Detail = "Debe configurar al menos un filtro para ejecutar la consulta",
                Duration = 3000
            });
            return;
        }

        try
        {
            isLoading = true;

            var request = new AdvancedQueryRequest
            {
                Filters = dataFilter.Filters.ToArray(),
                LogicalOperator = logicalOperator,
                FilterCaseSensitivity = filterCaseSensitivity,
                Take = takeLimit
            };

            queryResults = await AdvancedQueryService.ExecuteAdvancedQueryAsync(selectedEntityName!, request, selectedEntity?.BackendApi);

            if (queryResults.Success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Consulta Exitosa",
                    Detail = $"Se encontraron {queryResults.TotalCount} registros",
                    Duration = 3000
                });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error en Consulta",
                    Detail = queryResults.Message,
                    Duration = 5000
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Error ejecutando consulta: {ex.Message}",
                Duration = 5000
            });
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ClearFilters()
    {
        if (dataFilter != null)
        {
            await dataFilter.ClearFilters();
            queryResults = null;
        }
    }

    private async Task ShowGeneratedQuery()
    {
        if (dataFilter?.Filters != null && dataFilter.Filters.Any())
        {
            try
            {
                // Generar la query string usando el servicio
                var request = new AdvancedQueryRequest
                {
                    Filters = dataFilter.Filters.ToArray(),
                    LogicalOperator = logicalOperator,
                    FilterCaseSensitivity = filterCaseSensitivity
                };

                var filterString = "Generada por AdvancedQueryService.ConvertFiltersToLinqString()";

                var queryInfo = $@"
**Filtros Configurados:** {dataFilter.Filters.Count()}
**Operador Lógico:** {logicalOperator}
**Sensibilidad:** {filterCaseSensitivity}
**Límite:** {takeLimit}

**Query LINQ Generada:**
```
{filterString}
```

**Endpoint que se llamaría:**
POST /api/{selectedEntityName}/paged

**Payload JSON:**
```json
{{
  ""filter"": ""{filterString}"",
  ""take"": {takeLimit}
}}
```";

                await DialogService.OpenAsync("Query Generada", ds =>
                    @<div style="max-width: 800px;">
                        <RadzenMarkdown Value="@queryInfo" />
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.End" Style="margin-top: 1rem;">
                            <RadzenButton Text="Copiar Query" Icon="content_copy" Click="@(() => CopyToClipboard(filterString))" />
                            <RadzenButton Text="Cerrar" ButtonStyle="ButtonStyle.Light" Click="@(() => ds.Close())" />
                        </RadzenStack>
                    </div>
                );
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = $"Error generando query: {ex.Message}",
                    Duration = 5000
                });
            }
        }
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Copiado",
                Detail = "Query copiada al portapapeles",
                Duration = 2000
            });
        }
        catch
        {
            // Fallback para navegadores que no soportan clipboard API
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Información",
                Detail = "No se pudo copiar automáticamente. Selecciona y copia manualmente.",
                Duration = 3000
            });
        }
    }

    private async Task SaveConfiguration()
    {
        if (dataFilter?.Filters == null || !dataFilter.Filters.Any())
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Sin Filtros",
                Detail = "No hay filtros configurados para guardar",
                Duration = 3000
            });
            return;
        }

        var result = await DialogService.OpenAsync("Guardar Configuración", ds =>
            @<Frontend.Components.AdvancedQuery.SaveConfigurationDialog EntityName="@(selectedEntityName ?? "")"
                                                                        EntityDisplayName="@(selectedEntity?.DisplayName ?? "")"
                                                                        Filters="@dataFilter.Filters.ToArray()"
                                                                        LogicalOperator="@logicalOperator"
                                                                        FilterCaseSensitivity="@filterCaseSensitivity"
                                                                        Take="@takeLimit" />
        );

        if (result is bool success && success)
        {
            // Configuración guardada exitosamente
            StateHasChanged();
        }
    }

    private async Task LoadConfiguration()
    {
        if (string.IsNullOrEmpty(selectedEntityName))
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Seleccionar Entidad",
                Detail = "Primero debes seleccionar una entidad",
                Duration = 3000
            });
            return;
        }

        var result = await DialogService.OpenAsync("Cargar Configuración", ds =>
            @<Frontend.Components.AdvancedQuery.LoadConfigurationDialog EntityName="@(selectedEntityName ?? "")" />
        );

        if (result is SavedQueryConfiguration config)
        {
            await ApplyConfiguration(config);
        }
    }

    private async Task ApplyConfiguration(SavedQueryConfiguration config)
    {
        try
        {
            // Aplicar configuración cargada
            logicalOperator = config.LogicalOperator;
            filterCaseSensitivity = config.FilterCaseSensitivity;
            if (config.Take.HasValue)
            {
                takeLimit = config.Take.Value;
            }

            // Limpiar filtros actuales
            if (dataFilter != null)
            {
                await dataFilter.ClearFilters();

                // Aplicar filtros de la configuración
                var filters = config.GetFilters();
                foreach (var filter in filters)
                {
                    await dataFilter.AddFilter(filter);
                }

                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Configuración Aplicada",
                    Detail = $"Se aplicó la configuración '{config.Name}' con {filters.Length} filtros",
                    Duration = 3000
                });
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Error aplicando configuración: {ex.Message}",
                Duration = 5000
            });
        }
    }

    private async Task ViewDetails(object item)
    {
        var json = JsonSerializer.Serialize(item, new JsonSerializerOptions
        {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });

        await DialogService.OpenAsync("Detalles del Registro", ds =>
            @<div style="max-width: 600px;">
                <RadzenText TextStyle="TextStyle.Body1">Datos completos del registro:</RadzenText>
                <RadzenTextArea Value="@json" Rows="15" Style="width: 100%; font-family: monospace; font-size: 12px;" ReadOnly="true" />
                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.End" Style="margin-top: 1rem;">
                    <RadzenButton Text="Cerrar" ButtonStyle="ButtonStyle.Light" Click="@(() => ds.Close())" />
                </RadzenStack>
            </div>
        );
    }

    private string GetPropertyValue(object item, string propertyName)
    {
        if (item == null) return "";

        try
        {
            // Convertir a JsonElement para acceder a las propiedades dinámicamente
            if (item is JsonElement jsonElement)
            {
                if (jsonElement.TryGetProperty(propertyName, out var property))
                {
                    return property.ValueKind switch
                    {
                        JsonValueKind.String => property.GetString() ?? "",
                        JsonValueKind.Number => property.GetDecimal().ToString(),
                        JsonValueKind.True or JsonValueKind.False => property.GetBoolean().ToString(),
                        JsonValueKind.Null => "",
                        _ => property.ToString()
                    };
                }
            }

            // Fallback usando reflexión
            var propInfo = item.GetType().GetProperty(propertyName);
            var value = propInfo?.GetValue(item);
            return value?.ToString() ?? "";
        }
        catch
        {
            return "";
        }
    }

    // Variables para selección de campos
    private List<EntityFieldDefinition> selectedFields = new();
    private bool showFieldSelectionDialog = false;

    /// <summary>
    /// Abrir diálogo de selección de campos
    /// </summary>
    private async Task OpenFieldSelectionDialog()
    {
        if (!entityFields.Any()) return;

        // Configurar campos seleccionados basado en IsSelectedByDefault
        if (!selectedFields.Any())
        {
            selectedFields = entityFields.Where(f => f.IsVisible && f.IsSelectedByDefault).ToList();
        }

        var result = await DialogService.OpenAsync("Configurar Campos Visibles", ds =>
            @<div style="max-width: 600px;">
                <RadzenStack Gap="1rem">
                    <RadzenAlert AlertStyle="AlertStyle.Info" Icon="info">
                        Selecciona qué campos quieres ver en los resultados. Puedes arrastrar para reordenar.
                    </RadzenAlert>

                    <RadzenText TextStyle="TextStyle.H6">Campos Disponibles:</RadzenText>

                    <RadzenDataList Data="@entityFields.Where(f => f.IsVisible)"
                                  WrapItems="false"
                                  AllowPaging="false"
                                  Style="max-height: 400px; overflow-y: auto;">
                        <Template Context="field">
                            <RadzenCard Style="margin-bottom: 0.5rem;">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                        <RadzenCheckBox Value="@GetFieldSelection(field)"
                                                      Change="@((bool value) => ToggleFieldSelection(field))" />
                                        <RadzenStack Gap="0.25rem">
                                            <RadzenText TextStyle="TextStyle.Subtitle2">@field.DisplayName</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary-color);">
                                                @field.PropertyName (@field.FieldCategory)
                                            </RadzenText>
                                        </RadzenStack>
                                    </RadzenStack>

                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                                        @if (GetFieldSelectionIndex(field) >= 0)
                                        {
                                            <RadzenButton Icon="keyboard_arrow_up"
                                                        Size="ButtonSize.ExtraSmall"
                                                        ButtonStyle="ButtonStyle.Light"
                                                        Click="@(() => MoveFieldUp(field))"
                                                        Disabled="@(GetFieldSelectionIndex(field) == 0)" />
                                            <RadzenButton Icon="keyboard_arrow_down"
                                                        Size="ButtonSize.ExtraSmall"
                                                        ButtonStyle="ButtonStyle.Light"
                                                        Click="@(() => MoveFieldDown(field))"
                                                        Disabled="@(GetFieldSelectionIndex(field) == selectedFields.Count - 1)" />
                                        }
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        </Template>
                    </RadzenDataList>

                    <RadzenAlert AlertStyle="AlertStyle.Success" Icon="visibility" Visible="@selectedFields.Any()">
                        Campos seleccionados: @string.Join(", ", selectedFields.Select(f => f.DisplayName))
                    </RadzenAlert>
                </RadzenStack>

                <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.End" Style="margin-top: 1rem;">
                    <RadzenButton Text="Seleccionar Todo"
                                Icon="select_all"
                                ButtonStyle="ButtonStyle.Light"
                                Click="@SelectAllVisibleFields" />
                    <RadzenButton Text="Limpiar Selección"
                                Icon="clear_all"
                                ButtonStyle="ButtonStyle.Light"
                                Click="@ClearFieldSelection" />
                    <RadzenButton Text="Aplicar"
                                ButtonStyle="ButtonStyle.Primary"
                                Icon="check"
                                Click="@(() => ds.Close(true))" />
                    <RadzenButton Text="Cancelar"
                                ButtonStyle="ButtonStyle.Light"
                                Click="@(() => ds.Close(false))" />
                </RadzenStack>
            </div>
        );

        // Si el usuario aplicó los cambios, actualizar la UI
        if (result == true)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Campos Configurados",
                Detail = $"Se configuraron {selectedFields.Count} campos para mostrar",
                Duration = 3000
            });
        }
    }

    /// <summary>
    /// Verificar si un campo está seleccionado
    /// </summary>
    private bool GetFieldSelection(EntityFieldDefinition field)
    {
        return selectedFields.Any(f => f.PropertyName == field.PropertyName);
    }

    /// <summary>
    /// Obtener índice de selección de un campo
    /// </summary>
    private int GetFieldSelectionIndex(EntityFieldDefinition field)
    {
        return selectedFields.FindIndex(f => f.PropertyName == field.PropertyName);
    }

    /// <summary>
    /// Alternar selección de un campo
    /// </summary>
    private void ToggleFieldSelection(EntityFieldDefinition field)
    {
        var existingIndex = selectedFields.FindIndex(f => f.PropertyName == field.PropertyName);

        if (existingIndex >= 0)
        {
            selectedFields.RemoveAt(existingIndex);
        }
        else
        {
            selectedFields.Add(field);
        }

        StateHasChanged();
    }

    /// <summary>
    /// Mover campo hacia arriba en el orden
    /// </summary>
    private void MoveFieldUp(EntityFieldDefinition field)
    {
        var index = selectedFields.FindIndex(f => f.PropertyName == field.PropertyName);
        if (index > 0)
        {
            selectedFields.RemoveAt(index);
            selectedFields.Insert(index - 1, field);
            StateHasChanged();
        }
    }

    /// <summary>
    /// Mover campo hacia abajo en el orden
    /// </summary>
    private void MoveFieldDown(EntityFieldDefinition field)
    {
        var index = selectedFields.FindIndex(f => f.PropertyName == field.PropertyName);
        if (index >= 0 && index < selectedFields.Count - 1)
        {
            selectedFields.RemoveAt(index);
            selectedFields.Insert(index + 1, field);
            StateHasChanged();
        }
    }

    /// <summary>
    /// Seleccionar todos los campos visibles
    /// </summary>
    private void SelectAllVisibleFields()
    {
        selectedFields.Clear();
        selectedFields.AddRange(entityFields.Where(f => f.IsVisible));
        StateHasChanged();
    }

    /// <summary>
    /// Limpiar selección de campos
    /// </summary>
    private void ClearFieldSelection()
    {
        selectedFields.Clear();
        StateHasChanged();
    }

    /// <summary>
    /// Obtener campos para mostrar en la tabla de resultados
    /// </summary>
    private List<EntityFieldDefinition> GetDisplayFields()
    {
        // Si hay campos seleccionados, usar esos en el orden especificado
        if (selectedFields.Any())
        {
            return selectedFields;
        }

        // Si no hay selección, usar los campos por defecto (solo los seleccionados por defecto)
        var defaultFields = entityFields.Where(f => f.IsVisible && f.IsSelectedByDefault).ToList();
        if (defaultFields.Any())
        {
            return defaultFields;
        }

        // Fallback: mostrar máximo 6 campos visibles
        return entityFields.Where(f => f.IsVisible).Take(6).ToList();
    }
}