@using Radzen.Blazor
@implements IDisposable

@if (!string.IsNullOrEmpty(SelectedEntityName) && EntityFields.Any())
{
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenStack Gap="1rem">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenText TextStyle="TextStyle.H6">2. Configurar Filtros</RadzenText>

                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                            <RadzenButton Text="Cargar Configuración"
                                        Icon="folder_open"
                                        ButtonStyle="ButtonStyle.Light"
                                        Size="ButtonSize.Small"
                                        Click="@OnLoadConfigurationClick" />
                            <RadzenButton Text="Guardar Configuración"
                                        Icon="save"
                                        ButtonStyle="ButtonStyle.Light"
                                        Size="ButtonSize.Small"
                                        Click="@OnSaveConfigurationClick"
                                        Disabled="@(!HasFilters)" />
                        </RadzenStack>
                    </RadzenStack>

                    <!-- Configuración Global del Filtro -->
                    <RadzenRow>
                        <RadzenColumn Size="4">
                            <RadzenLabel Text="Operador Lógico Principal:" />
                            <RadzenSelectBar @bind-Value="LogicalOperator" TValue="LogicalFilterOperator">
                                <Items>
                                    <RadzenSelectBarItem Text="Y (AND)" Value="LogicalFilterOperator.And" />
                                    <RadzenSelectBarItem Text="O (OR)" Value="LogicalFilterOperator.Or" />
                                </Items>
                            </RadzenSelectBar>
                        </RadzenColumn>
                        <RadzenColumn Size="4">
                            <RadzenLabel Text="Sensibilidad a Mayúsculas:" />
                            <RadzenSelectBar @bind-Value="FilterCaseSensitivity" TValue="FilterCaseSensitivity">
                                <Items>
                                    <RadzenSelectBarItem Text="Ignorar" Value="FilterCaseSensitivity.CaseInsensitive" />
                                    <RadzenSelectBarItem Text="Considerar" Value="FilterCaseSensitivity.Default" />
                                </Items>
                            </RadzenSelectBar>
                        </RadzenColumn>
                        <RadzenColumn Size="4">
                            <RadzenLabel Text="Límite de Resultados:" />
                            <RadzenNumeric @bind-Value="TakeLimit" Min="1" Max="1000" Style="width: 100%;" />
                        </RadzenColumn>
                    </RadzenRow>

                    <!-- RadzenDataFilter -->
                    <div @onclick="@RefreshFilterState" @onclick:stopPropagation="false">
                        <RadzenDataFilter @ref="dataFilterRef"
                                        TItem="object"
                                        LogicalFilterOperator="@LogicalOperator"
                                        FilterCaseSensitivity="@FilterCaseSensitivity"
                                        Auto="false">
                            <Properties>
                                @foreach (var field in EntityFields.Where(f => f.IsSearchable))
                                {
                                    <RadzenDataFilterProperty Property="@field.PropertyName"
                                                            Title="@field.DisplayName"
                                                            Type="@field.PropertyType" />
                                }
                            </Properties>
                        </RadzenDataFilter>
                    </div>

                    <!-- Botones de Acción -->
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" JustifyContent="JustifyContent.Center">
                        <RadzenButton Text="Ejecutar Consulta"
                                    Icon="play_arrow"
                                    ButtonStyle="ButtonStyle.Primary"
                                    Size="ButtonSize.Medium"
                                    Click="@OnExecuteQueryClick"
                                    @onmouseenter="@RefreshFilterState"
                                    Disabled="@(IsLoading || !HasFilters)" />

                        <RadzenButton Text="Limpiar Filtros"
                                    Icon="clear"
                                    ButtonStyle="ButtonStyle.Light"
                                    Size="ButtonSize.Medium"
                                    Click="@OnClearFiltersClick" />

                        <RadzenButton Text="Ver Query SQL"
                                    Icon="code"
                                    ButtonStyle="ButtonStyle.Secondary"
                                    Size="ButtonSize.Medium"
                                    Click="@OnShowQueryClick"
                                    Disabled="@(!HasFilters)" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
}

@code {
    [Parameter] public string? SelectedEntityName { get; set; }
    [Parameter] public List<EntityFieldDefinition> EntityFields { get; set; } = new();
    [Parameter] public bool IsLoading { get; set; }

    private RadzenDataFilter<object>? dataFilterRef;
    private bool hasFilters = false;
    private Timer? filterCheckTimer;

    /// <summary>
    /// Expone la referencia del DataFilter para uso del componente padre
    /// </summary>
    public RadzenDataFilter<object>? DataFilter => dataFilterRef;

    /// <summary>
    /// Indica si hay filtros configurados
    /// </summary>
    private bool HasFilters => hasFilters;

    [Parameter] public LogicalFilterOperator LogicalOperator { get; set; } = LogicalFilterOperator.And;
    [Parameter] public FilterCaseSensitivity FilterCaseSensitivity { get; set; } = FilterCaseSensitivity.CaseInsensitive;
    [Parameter] public int TakeLimit { get; set; } = 50;

    [Parameter] public EventCallback<LogicalFilterOperator> LogicalOperatorChanged { get; set; }
    [Parameter] public EventCallback<FilterCaseSensitivity> FilterCaseSensitivityChanged { get; set; }
    [Parameter] public EventCallback<int> TakeLimitChanged { get; set; }

    [Parameter] public EventCallback OnExecuteQuery { get; set; }
    [Parameter] public EventCallback OnClearFilters { get; set; }
    [Parameter] public EventCallback OnShowQuery { get; set; }
    [Parameter] public EventCallback OnLoadConfiguration { get; set; }
    [Parameter] public EventCallback OnSaveConfiguration { get; set; }

    private async Task OnExecuteQueryClick()
    {
        // Verificar estado antes de ejecutar
        RefreshFilterState();
        await OnExecuteQuery.InvokeAsync();
    }

    private async Task OnClearFiltersClick()
    {
        await OnClearFilters.InvokeAsync();
    }

    private async Task OnShowQueryClick()
    {
        // Verificar estado antes de mostrar query
        RefreshFilterState();
        await OnShowQuery.InvokeAsync();
    }

    private async Task OnLoadConfigurationClick()
    {
        await OnLoadConfiguration.InvokeAsync();
    }

    private async Task OnSaveConfigurationClick()
    {
        // Verificar estado antes de guardar
        RefreshFilterState();
        await OnSaveConfiguration.InvokeAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Iniciar timer para verificar cambios en filtros cada 500ms
            filterCheckTimer = new Timer(CheckFiltersState, null, 500, 500);
        }
    }

    private void CheckFiltersState(object? state)
    {
        try
        {
            var currentHasFilters = dataFilterRef?.Filters?.Any() == true;
            if (currentHasFilters != hasFilters)
            {
                hasFilters = currentHasFilters;
                InvokeAsync(StateHasChanged);
            }
        }
        catch
        {
            // Ignorar errores del timer
        }
    }

    /// <summary>
    /// Método público para refrescar el estado de los filtros desde el componente padre
    /// </summary>
    public void RefreshFilterState()
    {
        hasFilters = dataFilterRef?.Filters?.Any() == true;
        StateHasChanged();
    }

    public void Dispose()
    {
        filterCheckTimer?.Dispose();
    }
}