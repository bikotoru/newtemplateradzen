@using Radzen.Blazor

<RadzenRow>
    <RadzenColumn Size="12">
        <RadzenCard>
            <RadzenStack Gap="1rem">
                <RadzenText TextStyle="TextStyle.H6">1. Seleccionar Entidad</RadzenText>

                <RadzenRow>
                    <RadzenColumn Size="6">
                        <RadzenDropDown @bind-Value="SelectedEntityName"
                                      Data="@AvailableEntities"
                                      TextProperty="DisplayName"
                                      ValueProperty="EntityName"
                                      Placeholder="Selecciona una entidad..."
                                      Change="@OnEntityChanged"
                                      AllowClear="true"
                                      Style="width: 100%;" />
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        @if (!string.IsNullOrEmpty(SelectedEntityName))
                        {
                            <RadzenButton Text="@($"{GetSelectedFieldsCount()} campos seleccionados - Configurar")"
                                        Icon="settings"
                                        ButtonStyle="ButtonStyle.Info"
                                        Size="ButtonSize.Small"
                                        Click="@OnConfigureFieldsClick" />
                        }
                    </RadzenColumn>
                </RadzenRow>

                @if (!string.IsNullOrEmpty(SelectedEntity?.Description))
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" Icon="info">
                        @SelectedEntity.Description
                    </RadzenAlert>
                }
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter] public List<AvailableEntityDto> AvailableEntities { get; set; } = new();
    [Parameter] public string? SelectedEntityName { get; set; }
    [Parameter] public AvailableEntityDto? SelectedEntity { get; set; }
    [Parameter] public List<EntityFieldDefinition> EntityFields { get; set; } = new();
    [Parameter] public List<EntityFieldDefinition> SelectedFields { get; set; } = new();

    [Parameter] public EventCallback<string?> SelectedEntityNameChanged { get; set; }
    [Parameter] public EventCallback OnEntitySelectionChanged { get; set; }
    [Parameter] public EventCallback OnConfigureFields { get; set; }

    private async Task OnEntityChanged()
    {
        await SelectedEntityNameChanged.InvokeAsync(SelectedEntityName);
        await OnEntitySelectionChanged.InvokeAsync();
    }

    private async Task OnConfigureFieldsClick()
    {
        await OnConfigureFields.InvokeAsync();
    }

    private int GetSelectedFieldsCount()
    {
        // Si hay campos seleccionados explícitamente, usar esos
        if (SelectedFields.Any())
        {
            return SelectedFields.Count;
        }

        // Si no hay selección, usar los campos por defecto
        return EntityFields.Where(f => f.IsVisible && f.IsSelectedByDefault).Count();
    }
}