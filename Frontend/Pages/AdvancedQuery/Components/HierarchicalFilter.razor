@using Radzen.Blazor
@using System.Reflection
@using Frontend.Services
@using Microsoft.Extensions.Logging

<RadzenCard>
    <RadzenStack Gap="1rem">
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
            <RadzenText TextStyle="TextStyle.H6">
                <RadzenIcon Icon="filter_alt" /> Configurar Filtros
            </RadzenText>
            <RadzenButton Text="Agregar Filtro"
                        Icon="add"
                        ButtonStyle="ButtonStyle.Primary"
                        Size="ButtonSize.Small"
                        Click="@ShowFieldSelector" />
        </RadzenStack>

        @* Selector de campos para agregar nuevo filtro *@
        @if (showFieldSelector)
        {
            <RadzenCard Style="background-color: var(--rz-primary-lighter); padding: 1rem; margin-bottom: 1rem;">
                <RadzenStack Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.Subtitle2">
                        @if (showChildFieldSelector && parentForChildSelection != null)
                        {
                            <text>Seleccionar campo de <strong>@parentForChildSelection.DisplayName</strong>:</text>
                        }
                        else
                        {
                            <text>Seleccionar campo para filtrar:</text>
                        }
                    </RadzenText>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" AlignItems="AlignItems.Center">
                        <RadzenDropDown @bind-Value="selectedFieldToAdd"
                                      Data="@availableFields.OrderBy(f => f.DisplayName)"
                                      Style="width: 350px;"
                                      Placeholder="Seleccione un campo..."
                                      AllowClear="false"
                                      AllowFiltering="true"
                                      FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                      ValueProperty="PropertyName">
                            <Template Context="field">
                                @{
                                    var f = field as EntityFieldDefinition;
                                    if (f != null)
                                    {
                                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                                            @if (f.IsNavigationProperty)
                                            {
                                                <RadzenIcon Icon="account_tree" Style="color: var(--rz-primary);" />
                                                <strong>@f.DisplayName</strong>
                                                <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="Relación" />
                                            }
                                            else
                                            {
                                                <RadzenIcon Icon="text_fields" Style="color: var(--rz-text-secondary-color);" />
                                                <span>@f.DisplayName</span>
                                            }
                                        </div>
                                    }
                                }
                            </Template>
                        </RadzenDropDown>
                        <RadzenButton Text="Agregar"
                                    Icon="check"
                                    ButtonStyle="ButtonStyle.Success"
                                    Size="ButtonSize.Small"
                                    Click="@ConfirmFieldSelection"
                                    Disabled="@(string.IsNullOrEmpty(selectedFieldToAdd))" />
                        <RadzenButton Text="Cancelar"
                                    Icon="close"
                                    ButtonStyle="ButtonStyle.Light"
                                    Size="ButtonSize.Small"
                                    Click="@CancelFieldSelection" />
                    </RadzenStack>
                    @if (!string.IsNullOrEmpty(selectedFieldToAdd))
                    {
                        var selectedField = availableFields.FirstOrDefault(f => f.PropertyName == selectedFieldToAdd);
                        if (selectedField?.IsNavigationProperty == true)
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true" Size="AlertSize.Small">
                                <RadzenText TextStyle="TextStyle.Caption">
                                    <strong>Nota:</strong> Este es un campo de relación. Podrás filtrar por las propiedades de @selectedField.DisplayName seleccionando el operador "Relacionado".
                                </RadzenText>
                            </RadzenAlert>
                        }
                    }
                </RadzenStack>
            </RadzenCard>
        }

        @if (filterRows.Any())
        {
            <div class="filter-table">
                <div class="filter-header">
                    <div class="col-field">Campo</div>
                    <div class="col-operator">Operación</div>
                    <div class="col-value">Valor</div>
                    <div class="col-actions">Acciones</div>
                </div>

                @foreach (var row in filterRows)
                {
                    @RenderFilterRow(row, 0)
                }
            </div>
        }
        else
        {
            <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true">
                <RadzenText>
                    No hay filtros configurados. Haga clic en el botón superior para agregar filtros.
                </RadzenText>
            </RadzenAlert>
        }
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter] public List<EntityFieldDefinition> EntityFields { get; set; } = new();
    [Parameter] public EventCallback OnFilterChanged { get; set; }

    private List<FilterRow> filterRows = new();
    private List<EntityFieldDefinition> availableFields = new();
    private bool showFieldSelector = false;
    private bool showChildFieldSelector = false;
    private FilterRow? parentForChildSelection = null;

    /// <summary>
    /// Expone los filtros configurados
    /// </summary>
    public List<FilterRow> Filters => filterRows;
    private string? selectedFieldToAdd;

    [Inject] private DialogService DialogService { get; set; } = default!;
    [Inject] private ILogger<HierarchicalFilter> Logger { get; set; } = default!;

    protected override void OnParametersSet()
    {
        if (!showChildFieldSelector)
        {
            availableFields = EntityFields.Where(f => f.IsSearchable).ToList();
        }
    }

    private RenderFragment RenderFilterRow(FilterRow row, int level) => builder =>
    {
        var paddingLeft = level * 20;

        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", $"filter-row {(row.IsExpanded ? "expanded" : "")}");
        builder.AddAttribute(2, "style", $"padding-left: {paddingLeft}px;");

        if (row.IsRelation)
        {
            // Columna Campo - Relación
            builder.OpenElement(3, "div");
            builder.AddAttribute(4, "class", "col-field");

            builder.OpenComponent<RadzenIcon>(5);
            builder.AddAttribute(6, "Icon", row.IsExpanded ? "expand_less" : "expand_more");
            builder.AddAttribute(7, "Style", "cursor: pointer;");
            builder.AddAttribute(8, "onclick", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, () => ToggleExpand(row)));
            builder.CloseComponent();

            builder.OpenElement(9, "strong");
            builder.AddContent(10, row.DisplayName);
            builder.CloseElement();

            builder.CloseElement(); // col-field

            // Columna Operador
            builder.OpenElement(11, "div");
            builder.AddAttribute(12, "class", "col-operator");

            builder.OpenComponent<RadzenDropDown<string>>(13);
            builder.AddAttribute(14, "Value", row.SelectedOperator);
            builder.AddAttribute(15, "ValueChanged", EventCallback.Factory.Create<string>(this, value => {
                row.SelectedOperator = value;
                OnRelationOperatorChange(row);
            }));
            builder.AddAttribute(16, "Data", GetRelationOperators());
            builder.AddAttribute(17, "TextProperty", "Text");
            builder.AddAttribute(18, "ValueProperty", "Value");
            builder.AddAttribute(19, "Style", "width: 100%;");
            builder.CloseComponent();

            builder.CloseElement(); // col-operator

            // Columna Valor
            builder.OpenElement(20, "div");
            builder.AddAttribute(21, "class", "col-value");

            if (row.SelectedOperator == "relacionado")
            {
                builder.OpenComponent<RadzenText>(22);
                builder.AddAttribute(23, "TextStyle", TextStyle.Caption);
                builder.AddAttribute(24, "Style", "color: var(--rz-text-secondary-color);");
                builder.AddContent(25, "Expandir para configurar");
                builder.CloseComponent();
            }

            builder.CloseElement(); // col-value

            // Columna Acciones
            builder.OpenElement(26, "div");
            builder.AddAttribute(27, "class", "col-actions");

            builder.OpenComponent<RadzenButton>(28);
            builder.AddAttribute(29, "Icon", "delete");
            builder.AddAttribute(30, "ButtonStyle", ButtonStyle.Danger);
            builder.AddAttribute(31, "Size", ButtonSize.Small);
            builder.AddAttribute(32, "Click", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, () => RemoveFilter(row)));
            builder.CloseComponent();

            builder.CloseElement(); // col-actions
        }
        else
        {
            // Campo normal (no relación)
            RenderNormalField(builder, row, 33);
        }

        builder.CloseElement(); // filter-row

        // Si es relación expandida con operador "relacionado", mostrar hijos
        if (row.IsRelation && row.IsExpanded && row.SelectedOperator == "relacionado")
        {
            if (row.Children.Any())
            {
                foreach (var child in row.Children)
                {
                    builder.AddContent(100, RenderFilterRow(child, level + 1));
                }
            }
            else
            {
                // Botón para agregar filtro hijo
                builder.OpenElement(101, "div");
                builder.AddAttribute(102, "class", "filter-row");
                builder.AddAttribute(103, "style", $"padding-left: {(level + 1) * 20}px;");

                builder.OpenElement(104, "div");
                builder.AddAttribute(105, "class", "col-field");
                builder.AddAttribute(106, "style", "grid-column: 1 / -1; text-align: center; padding: 10px;");

                builder.OpenComponent<RadzenButton>(107);
                builder.AddAttribute(108, "Text", $"+ Agregar filtro de {row.DisplayName}");
                builder.AddAttribute(109, "Icon", "add");
                builder.AddAttribute(110, "ButtonStyle", ButtonStyle.Light);
                builder.AddAttribute(111, "Size", ButtonSize.Small);
                builder.AddAttribute(112, "Click", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, () => ShowChildFieldSelector(row)));
                builder.CloseComponent();

                builder.CloseElement(); // col-field
                builder.CloseElement(); // filter-row
            }
        }
    };

    private void RenderNormalField(RenderTreeBuilder builder, FilterRow row, int sequence)
    {
        // Columna Campo
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "col-field");
        builder.AddContent(sequence++, row.DisplayName);
        builder.CloseElement();

        // Columna Operador
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "col-operator");

        builder.OpenComponent<RadzenDropDown<string>>(sequence++);
        builder.AddAttribute(sequence++, "Value", row.SelectedOperator);
        builder.AddAttribute(sequence++, "ValueChanged", EventCallback.Factory.Create<string>(this, value => {
            row.SelectedOperator = value;
            StateHasChanged();
        }));
        builder.AddAttribute(sequence++, "Data", GetOperatorsForType(row.PropertyType));
        builder.AddAttribute(sequence++, "Style", "width: 100%;");
        builder.CloseComponent();

        builder.CloseElement();

        // Columna Valor
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "col-value");

        RenderValueControl(builder, row, sequence);

        builder.CloseElement();

        // Columna Acciones
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "col-actions");

        builder.OpenComponent<RadzenButton>(sequence++);
        builder.AddAttribute(sequence++, "Icon", "delete");
        builder.AddAttribute(sequence++, "ButtonStyle", ButtonStyle.Light);
        builder.AddAttribute(sequence++, "Size", ButtonSize.Small);
        builder.AddAttribute(sequence++, "Click", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, () => RemoveFilter(row)));
        builder.CloseComponent();

        builder.CloseElement();
    }

    private void RenderValueControl(RenderTreeBuilder builder, FilterRow row, int sequence)
    {
        switch (row.PropertyType.Name)
        {
            case "String":
                builder.OpenComponent<RadzenTextBox>(sequence++);
                builder.AddAttribute(sequence++, "Value", row.StringValue);
                builder.AddAttribute(sequence++, "ValueChanged", EventCallback.Factory.Create<string>(this, value => {
                    row.StringValue = value;
                    StateHasChanged();
                }));
                builder.AddAttribute(sequence++, "Style", "width: 100%;");
                builder.CloseComponent();
                break;

            case "Int32":
            case "Int64":
            case "Decimal":
            case "Double":
                builder.OpenComponent<RadzenNumeric<decimal?>>(sequence++);
                builder.AddAttribute(sequence++, "Value", row.NumericValue);
                builder.AddAttribute(sequence++, "ValueChanged", EventCallback.Factory.Create<decimal?>(this, value => {
                    row.NumericValue = value;
                    StateHasChanged();
                }));
                builder.AddAttribute(sequence++, "Style", "width: 100%;");
                builder.CloseComponent();
                break;

            case "Boolean":
                builder.OpenComponent<RadzenCheckBox<bool?>>(sequence++);
                builder.AddAttribute(sequence++, "Value", row.BoolValue);
                builder.AddAttribute(sequence++, "ValueChanged", EventCallback.Factory.Create<bool?>(this, value => {
                    row.BoolValue = value;
                    StateHasChanged();
                }));
                builder.CloseComponent();
                break;

            case "DateTime":
                builder.OpenComponent<RadzenDatePicker<DateTime?>>(sequence++);
                builder.AddAttribute(sequence++, "Value", row.DateValue);
                builder.AddAttribute(sequence++, "ValueChanged", EventCallback.Factory.Create<DateTime?>(this, value => {
                    row.DateValue = value;
                    StateHasChanged();
                }));
                builder.AddAttribute(sequence++, "Style", "width: 100%;");
                builder.CloseComponent();
                break;

            default:
                builder.OpenComponent<RadzenTextBox>(sequence++);
                builder.AddAttribute(sequence++, "Value", row.StringValue);
                builder.AddAttribute(sequence++, "ValueChanged", EventCallback.Factory.Create<string>(this, value => {
                    row.StringValue = value;
                    StateHasChanged();
                }));
                builder.AddAttribute(sequence++, "Style", "width: 100%;");
                builder.CloseComponent();
                break;
        }
    }

    private async Task ShowFieldSelector()
    {
        showFieldSelector = true;
        showChildFieldSelector = false;
        parentForChildSelection = null;
        selectedFieldToAdd = null;
        StateHasChanged();
    }

    private void ConfirmFieldSelection()
    {
        if (!string.IsNullOrEmpty(selectedFieldToAdd))
        {
            var field = availableFields.FirstOrDefault(f => f.PropertyName == selectedFieldToAdd);
            if (field != null)
            {
                if (showChildFieldSelector && parentForChildSelection != null)
                {
                    AddChildFilter(parentForChildSelection, field);
                }
                else
                {
                    AddFilterFromSelector(field);
                }
            }
        }

        CancelFieldSelection();
    }

    private void CancelFieldSelection()
    {
        showFieldSelector = false;
        showChildFieldSelector = false;
        parentForChildSelection = null;
        selectedFieldToAdd = null;
        StateHasChanged();
    }

    private async Task ShowChildFieldSelector(FilterRow parentRow)
    {
        // Cargar campos de la entidad relacionada
        var childFields = await LoadRelationFields(parentRow.RelatedEntityTypeName);
        if (childFields != null && childFields.Any())
        {
            availableFields = childFields;
            parentForChildSelection = parentRow;
            showFieldSelector = true;
            showChildFieldSelector = true;
            selectedFieldToAdd = null;
            StateHasChanged();
        }
        else
        {
            // No hay campos disponibles para esta relación
            Logger.LogWarning("No se encontraron campos para {EntityType}", parentRow.RelatedEntityTypeName);
        }
    }

    private void AddFilterFromSelector(EntityFieldDefinition field)
    {
        var newRow = new FilterRow
        {
            PropertyName = field.PropertyName,
            DisplayName = field.DisplayName,
            PropertyType = field.PropertyType,
            IsRelation = field.IsNavigationProperty,
            RelatedEntityTypeName = field.RelatedEntityTypeName,
            Level = 0
        };

        filterRows.Add(newRow);
        StateHasChanged();
        OnFilterChanged.InvokeAsync();
    }

    private void AddChildFilter(FilterRow parentRow, EntityFieldDefinition field)
    {
        var childRow = new FilterRow
        {
            PropertyName = field.PropertyName,
            DisplayName = field.DisplayName,
            PropertyType = field.PropertyType,
            IsRelation = field.IsNavigationProperty,
            RelatedEntityTypeName = field.RelatedEntityTypeName,
            Level = parentRow.Level + 1
        };

        parentRow.Children.Add(childRow);
        StateHasChanged();
        OnFilterChanged.InvokeAsync();
    }

    private void AddFilter()
    {
        if (string.IsNullOrEmpty(selectedFieldToAdd)) return;

        var field = EntityFields.FirstOrDefault(f => f.PropertyName == selectedFieldToAdd);
        if (field == null) return;

        var newRow = new FilterRow
        {
            PropertyName = field.PropertyName,
            DisplayName = field.DisplayName,
            PropertyType = field.PropertyType,
            IsRelation = field.IsNavigationProperty,
            RelatedEntityTypeName = field.RelatedEntityTypeName,
            Level = 0
        };

        filterRows.Add(newRow);
        selectedFieldToAdd = null;
        StateHasChanged();
    }

    private void RemoveFilter(FilterRow row)
    {
        filterRows.Remove(row);
        StateHasChanged();
    }

    private void RemoveChildFilter(FilterRow parent, FilterRow child)
    {
        parent.Children.Remove(child);
        StateHasChanged();
    }

    private void ToggleExpand(FilterRow row)
    {
        row.IsExpanded = !row.IsExpanded;

        // Si se expande y no tiene hijos, cargarlos
        if (row.IsExpanded && !row.Children.Any() && row.IsRelation)
        {
            LoadChildFields(row);
        }

        StateHasChanged();
    }

    private void OnRelationOperatorChange(FilterRow row)
    {
        if (row.SelectedOperator == "relacionado")
        {
            row.IsExpanded = true;
            if (!row.Children.Any())
            {
                LoadChildFields(row);
            }
        }
        else
        {
            row.IsExpanded = false;
            row.Children.Clear();
        }
        StateHasChanged();
    }

    private void LoadChildFields(FilterRow parentRow)
    {
        // No cargar campos automáticamente
        // El usuario debe hacer clic en "Agregar filtro de X" para seleccionar campos
    }

    private async Task<List<EntityFieldDefinition>> LoadRelationFields(string? entityTypeName)
    {
        var fields = new List<EntityFieldDefinition>();

        if (string.IsNullOrEmpty(entityTypeName)) return fields;

        // Buscar el tipo de la entidad relacionada
        var relatedType = FindEntityType(entityTypeName);
        if (relatedType == null)
        {
            Logger.LogWarning("No se encontró el tipo de entidad: {EntityType}", entityTypeName);
            return fields;
        }

        var properties = relatedType.GetProperties(BindingFlags.Public | BindingFlags.Instance);

        foreach (var property in properties)
        {
            if (IsFilterableProperty(property))
            {
                fields.Add(new EntityFieldDefinition
                {
                    PropertyName = property.Name,
                    DisplayName = ConvertToDisplayName(property.Name),
                    PropertyType = Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType,
                    IsNavigationProperty = IsNavigationProperty(property),
                    RelatedEntityTypeName = IsNavigationProperty(property) ? property.PropertyType.Name : null,
                    IsSearchable = true,
                    IsVisible = true
                });
            }
        }

        return fields.OrderBy(f => f.DisplayName).ToList();
    }

    private Type? FindEntityType(string typeName)
    {
        var sharedModelsAssembly = AppDomain.CurrentDomain.GetAssemblies()
            .FirstOrDefault(a => a.GetName().Name == "Shared.Models");

        if (sharedModelsAssembly != null)
        {
            var fullTypeName = $"Shared.Models.Entities.{typeName}";
            return sharedModelsAssembly.GetType(fullTypeName, false, true);
        }

        return null;
    }

    private bool IsFilterableProperty(PropertyInfo property)
    {
        var propertyName = property.Name.ToLower();

        // Excluir campos del sistema básicos
        if (propertyName == "id" || propertyName.Contains("customfield") ||
            propertyName == "organizationid")
        {
            return false;
        }

        // Permitir las entidades de navegación Creador y Modificador
        if (propertyName == "creador" || propertyName == "modificador")
        {
            return IsNavigationProperty(property);
        }

        // Excluir los IDs de creador y modificador
        if (propertyName == "creadorid" || propertyName == "modificadorid")
        {
            return false;
        }

        // Excluir colecciones
        if (property.PropertyType.IsGenericType)
        {
            var genericType = property.PropertyType.GetGenericTypeDefinition();
            if (genericType == typeof(ICollection<>) ||
                genericType == typeof(IList<>) ||
                genericType == typeof(List<>) ||
                genericType == typeof(IEnumerable<>))
            {
                return false;
            }
        }

        return true;
    }

    private bool IsNavigationProperty(PropertyInfo property)
    {
        return property.PropertyType.IsClass &&
               property.PropertyType != typeof(string) &&
               property.PropertyType.Namespace?.StartsWith("Shared.Models.Entities") == true &&
               !property.PropertyType.IsArray &&
               !property.PropertyType.IsGenericType;
    }

    private string ConvertToDisplayName(string propertyName)
    {
        return System.Text.RegularExpressions.Regex.Replace(propertyName,
            "([a-z])([A-Z])", "$1 $2");
    }

    private List<dynamic> GetRelationOperators()
    {
        return new List<dynamic>
        {
            new { Text = "Igual a", Value = "igual" },
            new { Text = "Diferente de", Value = "diferente" },
            new { Text = "Es nulo", Value = "nulo" },
            new { Text = "No es nulo", Value = "nonulo" },
            new { Text = "Relacionado", Value = "relacionado" }
        };
    }

    private List<string> GetOperatorsForType(Type type)
    {
        if (type == typeof(string))
        {
            return new List<string> { "Contiene", "Igual a", "Comienza con", "Termina con", "No contiene" };
        }
        else if (type == typeof(bool) || type == typeof(bool?))
        {
            return new List<string> { "Igual a", "Diferente de" };
        }
        else if (IsNumericType(type))
        {
            return new List<string> { "Igual a", "Mayor que", "Menor que", "Mayor o igual", "Menor o igual" };
        }
        else if (type == typeof(DateTime) || type == typeof(DateTime?))
        {
            return new List<string> { "Igual a", "Antes de", "Después de", "Entre" };
        }
        else
        {
            return new List<string> { "Igual a", "Diferente de", "Es nulo", "No es nulo" };
        }
    }

    private bool IsNumericType(Type type)
    {
        return type == typeof(int) || type == typeof(int?) ||
               type == typeof(long) || type == typeof(long?) ||
               type == typeof(decimal) || type == typeof(decimal?) ||
               type == typeof(double) || type == typeof(double?) ||
               type == typeof(float) || type == typeof(float?);
    }

    public class FilterRow
    {
        public string PropertyName { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public Type PropertyType { get; set; } = typeof(string);
        public bool IsRelation { get; set; }
        public string? RelatedEntityTypeName { get; set; }
        public int Level { get; set; }
        public bool IsExpanded { get; set; }
        public string SelectedOperator { get; set; } = "";
        public List<FilterRow> Children { get; set; } = new();
        public string PropertyPath => GeneratePropertyPath();

        // Valores para diferentes tipos
        public string? StringValue { get; set; }
        public decimal? NumericValue { get; set; }
        public bool? BoolValue { get; set; }
        public DateTime? DateValue { get; set; }

        // Propiedad unificada para obtener el valor actual
        public object? Value
        {
            get
            {
                if (StringValue != null) return StringValue;
                if (NumericValue != null) return NumericValue;
                if (BoolValue != null) return BoolValue;
                if (DateValue != null) return DateValue;
                return null;
            }
        }

        private string GeneratePropertyPath()
        {
            // Esta propiedad generará el path completo para las propiedades anidadas
            // Por ahora retornar solo el PropertyName
            return PropertyName;
        }
    }
}

<style>
    .filter-table {
        background: var(--rz-base-background-color);
        border-radius: 8px;
        padding: 1rem;
    }

    .filter-header {
        display: grid;
        grid-template-columns: 1fr 200px 250px 100px;
        gap: 1rem;
        padding: 0.5rem 0;
        border-bottom: 1px solid var(--rz-border-color);
        margin-bottom: 0.5rem;
        font-weight: 600;
    }

    .filter-row {
        display: grid;
        grid-template-columns: 1fr 200px 250px 100px;
        gap: 1rem;
        padding: 0.5rem 0;
        align-items: center;
        transition: background-color 0.2s;
    }

    .filter-row:hover {
        background-color: var(--rz-base-100);
        border-radius: 4px;
    }

    .filter-row.expanded {
        background-color: var(--rz-primary-lighter);
        border-radius: 4px;
    }

    .child-row {
        background-color: rgba(var(--rz-primary-rgb), 0.05);
        border-left: 2px solid var(--rz-primary);
    }

    .grandchild-row {
        background-color: rgba(var(--rz-primary-rgb), 0.03);
        border-left: 2px solid var(--rz-primary-light);
    }

    .col-field, .col-operator, .col-value, .col-actions {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
</style>