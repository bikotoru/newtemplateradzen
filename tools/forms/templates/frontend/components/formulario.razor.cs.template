using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Web;
using Shared.Models.Entities;
using Shared.Models.Builders;
using Frontend.Services.Validation;
using Frontend.Components.Validation;
using Frontend.Components.Auth;
using Frontend.Components.Forms;
using global::Forms.Models.DTOs;
using global::Forms.Models.Enums;
using {{ENTITY_NAME}}Entity = Shared.Models.Entities.{{ENTITY_NAME}};
using Radzen;
using System.Linq.Expressions;

namespace Frontend.Modules.{{MODULE_WITH_ENTITY}};

public partial class {{ENTITY_NAME}}Formulario : AuthorizedPageBase
{
    [Inject] private {{ENTITY_NAME}}Service {{ENTITY_NAME}}Service { get; set; } = null!;
    [Inject] private NavigationManager Navigation { get; set; } = null!;
    [Inject] private NotificationService NotificationService { get; set; } = null!;
    [Inject] private DialogService DialogService { get; set; } = null!;
    [Inject] private IServiceProvider ServiceProvider { get; set; } = null!;
    {{LOOKUP_SERVICE_INJECTIONS}}
    [Parameter] public Guid? Id { get; set; }

    private {{ENTITY_NAME}}Entity? entity;
    private bool isLoading = false;
    private bool isEditMode => Id.HasValue;
    private bool isFormValid = false;
    private bool isNewlyCreated = false;
    private bool hasCustomFields = false;
    private CustomFieldsTab? customFieldsTab;

    // Propiedades de permisos
    private bool CanView => AuthService.HasPermission("{{ENTITY_UPPER}}.VIEW");
    private bool CanCreate => AuthService.HasPermission("{{ENTITY_UPPER}}.CREATE");
    private bool CanEdit => isEditMode ? AuthService.HasPermission("{{ENTITY_UPPER}}.UPDATE") : AuthService.HasPermission("{{ENTITY_UPPER}}.CREATE");
    private bool CanSave => CanEdit;

    {{LOOKUP_SEARCH_FIELDS}}

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync(); // ¡IMPORTANTE! Siempre llamar primero al base para verificar permisos
        
        if (HasRequiredPermissions)
        {
            await OnPermissionsVerifiedAsync();
        }
    }

    protected override async Task OnPermissionsVerifiedAsync()
    {
        if (isEditMode && Id.HasValue)
        {
            await LoadEntity();
            
            if (Navigation.Uri.Contains("created=true"))
            {
                isNewlyCreated = true;
                
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "¡Éxito!",
                    Detail = "{{ENTITY_DISPLAY_NAME}} creado exitosamente. Ahora puedes editarlo.",
                    Duration = 5000
                });
                
                Navigation.NavigateTo($"/{{MODULE_PATH}}/{{ENTITY_LOWER}}/formulario/{Id}", replace: true);
            }
        }
        else
        {
            entity = new {{ENTITY_NAME}}Entity 
            { 
                Active = true,
                FechaCreacion = DateTime.Now,
                FechaModificacion = DateTime.Now
            };
        }
        
        {{LOOKUP_FIELD_INITIALIZATIONS}}
        await CheckForCustomFields();
        StateHasChanged();
    }

    private async Task LoadEntity()
    {
        try
        {
            isLoading = true;
            await DialogService.OpenLoadingAsync("Obteniendo datos...");
            var response = await {{ENTITY_NAME}}Service.GetByIdAsync(Id!.Value);
            
            if (response.Success && response.Data != null)
            {
                entity = response.Data;
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se pudo cargar el {{ENTITY_LOWER}}",
                    Duration = 5000
                });
                Navigation.NavigateTo("/{{MODULE_PATH}}/{{ENTITY_LOWER}}/list");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Error cargando {{ENTITY_LOWER}}: {ex.Message}",
                Duration = 5000
            });
        }
        finally
        {
            isLoading = false;
            DialogService.Close();
            await CheckForCustomFields();
            StateHasChanged();
        }
    }

    private FormValidationRules GetValidationRules()
    {
        return FormValidationRulesBuilder
            .Create()
            {{VALIDATION_RULES}}
            .Build();
    }
    
    private FormValidator? formValidator;

    private async Task SaveForm()
    {
        try
        {
            // Verificar permisos antes de continuar
            if (!CanSave)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Permisos Insuficientes",
                    Detail = isEditMode ? 
                        "No tienes permisos para editar este registro" : 
                        "No tienes permisos para crear nuevos registros",
                    Duration = 4000
                });
                return;
            }

            if (entity == null)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Error interno: entidad no inicializada",
                    Duration = 4000
                });
                return;
            }

            isLoading = true;

            {{FIELD_VALIDATIONS}}

            // Validación de campos personalizados
            if (hasCustomFields && customFieldsTab != null && !customFieldsTab.IsValid())
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Validación",
                    Detail = "Por favor corrige los errores en los campos personalizados",
                    Duration = 4000
                });
                return;
            }

            if (isEditMode)
            {
                var updateRequest = new UpdateRequestBuilder<{{ENTITY_NAME}}Entity>(entity)
                    .Build();

                await DialogService.OpenLoadingAsync("Actualizando...");
                var response = await {{ENTITY_NAME}}Service.UpdateAsync(updateRequest);
                DialogService.Close();

                if (response.Success)
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "¡Éxito!",
                        Detail = "{{ENTITY_DISPLAY_NAME}} actualizado exitosamente",
                        Duration = 4000
                    });
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = response.Message ?? "Error al actualizar {{ENTITY_LOWER}}",
                        Duration = 5000
                    });
                }
            }
            else
            {
                var createRequest = new CreateRequestBuilder<{{ENTITY_NAME}}Entity>(entity)
                    .Build();

                await DialogService.OpenLoadingAsync("Creando...");
                var response = await {{ENTITY_NAME}}Service.CreateAsync(createRequest);
                DialogService.Close();

                if (response.Success && response.Data != null)
                {
                    entity = response.Data;
                    Navigation.NavigateTo($"/{{MODULE_PATH}}/{{ENTITY_LOWER}}/formulario/{entity.Id}?created=true");
                }
                else
                {
                    NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = response.Message ?? "Error al crear {{ENTITY_LOWER}}",
                        Duration = 5000
                    });
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error Inesperado",
                Detail = ex.Message,
                Duration = 6000
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CheckForCustomFields()
    {
        try
        {
            // Inyectar API service para verificar si hay campos personalizados
            var apiService = ServiceProvider.GetRequiredService<Frontend.Services.API>();
            var response = await apiService.GetAsync<FormLayoutDto>("api/form-designer/formulario/layout/{{ENTITY_NAME}}", BackendType.FormBackend);

            if (response.Success && response.Data != null)
            {
                hasCustomFields = response.Data.Sections.Any(s => s.Fields.Any(f => !f.IsSystemField));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[{{ENTITY_NAME}}Formulario] Error checking custom fields: {ex.Message}");
            hasCustomFields = false;
        }
    }

    private async Task OnCustomFieldsChanged(string? customFieldsJson)
    {
        if (entity != null)
        {
            entity.CustomFields = customFieldsJson;
        }
        await Task.CompletedTask;
    }
}
